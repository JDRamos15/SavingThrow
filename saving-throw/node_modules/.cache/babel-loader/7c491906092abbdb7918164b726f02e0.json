{"ast":null,"code":"var _jsxFileName = \"/home/angeldburgos/Documents/SavingThrow/saving-throw/src/Components/CreateAccount/CreateAccount.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\"; //import ReCAPTCHA from \"react-google-recaptcha\";\n\nimport \"./CreateAccount.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateAccount() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    defaultValues: {\n      first_name: \"Bob\",\n      last_name: \"Bobson\",\n      email: \"robert@email.com\",\n      password: \"R0b#rt123\"\n    }\n  });\n  const [submitting, setSubmitting] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(async formData => {\n      setSubmitting(true); // if(submitting){\n      //     return false\n      // }\n\n      console.log(formData, \"formData\");\n      const response = await fetch(\"/create-user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        mode: 'cors',\n        body: JSON.stringify({\n          //formData\n          // if want to uses token(watch video)\n          firstName: formData.first_name,\n          lastName: formData.last_name,\n          email: formData.email,\n          password: formData.password\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      setSubmitting(false);\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \" First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"first_name\",\n        id: \"first_name\",\n        ref: register({\n          required: {\n            value: true,\n            message: \"Type your first name.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), errors.first_name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.first_name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \" Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"last_name\",\n        id: \"last_name\",\n        ref: register({\n          required: \"required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), errors.last_name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.last_name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \" Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        id: \"email\",\n        ref: register({\n          required: {\n            value: true,\n            message: \"Please enter valid email.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.email.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 30\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \" Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        ref: register({\n          required: \"required\",\n          minLength: {\n            value: 8,\n            message: \"Must be 8 characters long.\"\n          },\n          validate: value => {\n            return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every(pattern => pattern.test(value)) || \"Must contain lower, upper number, and special character\";\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.password.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: submitting,\n        children: \" Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 12\n  }, this);\n}\n\n_s(CreateAccount, \"Z0gszcXjvoyfmiDxAeH0Swtgt8g=\", false, function () {\n  return [useForm];\n});\n\n_c = CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/home/angeldburgos/Documents/SavingThrow/saving-throw/src/Components/CreateAccount/CreateAccount.tsx"],"names":["useState","useForm","CreateAccount","register","handleSubmit","errors","defaultValues","first_name","last_name","email","password","submitting","setSubmitting","formData","console","log","response","fetch","method","headers","mode","body","JSON","stringify","firstName","lastName","data","json","required","value","message","minLength","validate","every","pattern","test"],"mappings":"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","sourcesContent":["import {useRef, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateAccount.css\";\n\n\ninterface FormData {\n    first_name: string;\n    last_name: string;\n    email: string;\n    password: string;\n\n}\nexport default function CreateAccount(){\n    const {register, handleSubmit, errors,} = useForm<FormData>({\n        defaultValues:{\n            first_name: \"Bob\",\n            last_name: \"Bobson\",\n            email: \"robert@email.com\",\n            password: \"R0b#rt123\",\n        }\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            \n            // if(submitting){\n            //     return false\n            // }\n            console.log(formData, \"formData\");\n            \n            const response = await fetch(\"/create-user\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                mode: 'cors',\n                body: JSON.stringify({\n                    //formData\n                    // if want to uses token(watch video)\n                    firstName: formData.first_name,\n                    lastName: formData.last_name,\n                    email: formData.email,\n                    password: formData.password,\n                })\n            });\n            const data = await response.json();\n            console.log(data);\n            setSubmitting(false);\n        })}>\n        <div>\n            <label htmlFor=\"name\"> First Name</label>\n            <input \n                type=\"text\" \n                name=\"first_name\" \n                id=\"first_name\" \n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type your first name.\"\n                    }\n                    \n                })} \n            />\n            {errors.first_name ? <div>{errors.first_name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"name\"> Last Name</label>\n            <input \n                type=\"text\" \n                name=\"last_name\" \n                id=\"last_name\" \n                ref={register({required: \"required\"})} \n            />\n             {errors.last_name ? <div>{errors.last_name.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"email\"> Email</label>\n            <input \n                type=\"email\" \n                name=\"email\" \n                id=\"email\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid email.\"\n                }})} \n            />\n             {errors.email ? <div>{errors.email.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"password\"> Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 8,\n                        message: \"Must be 8 characters long.\",\n                    },\n                    validate: (value) => {\n                        return [\n                            /[a-z]/,\n                            /[A-Z]/,\n                            /[0-9]/,\n                            /[^a-zA-Z0-9]/,\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain lower, upper number, and special character\";\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Create Account</button>\n        </div>\n    </form>;\n}"]},"metadata":{},"sourceType":"module"}