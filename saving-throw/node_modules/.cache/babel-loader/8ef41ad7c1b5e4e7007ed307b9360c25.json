{"ast":null,"code":"var _jsxFileName = \"/home/angeldburgos/Documents/SavingThrow/saving-throw/src/Components/CreateAccount/CreateAccount.tsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\"; //import ReCAPTCHA from \"react-google-recaptcha\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateAccount() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(formData => {\n      console.log(formData, \"formData\");\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \" First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"first_name\",\n        id: \"first_name\",\n        ref: register({\n          required: \"required\",\n          message: \"Type your first name.\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), errors.first_name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.first_name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \" Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"last_name\",\n        id: \"last_name\",\n        ref: register({\n          required: \"required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), errors.last_name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.last_name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \" Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        id: \"email\",\n        ref: register({\n          required: \"required\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.email.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 30\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \" Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        ref: register({\n          required: \"required\",\n          minLength: {\n            value: 8,\n            message: \"Must be 8 characters long.\"\n          },\n          validate: value => {\n            return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every(pattern => pattern.test(value) || \"Must contain lowe, upper number, and special character\");\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.password.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n}\n\n_s(CreateAccount, \"bEVAii9oMzhW3ESoVlJ5HG28YG8=\", false, function () {\n  return [useForm];\n});\n\n_c = CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/home/angeldburgos/Documents/SavingThrow/saving-throw/src/Components/CreateAccount/CreateAccount.tsx"],"names":["useForm","CreateAccount","register","handleSubmit","errors","formData","console","log","required","message","first_name","last_name","email","minLength","value","validate","every","pattern","test","password"],"mappings":"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","sourcesContent":["import {useRef, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\n\n\ninterface FormData {\n    first_name: String;\n    last_name: String;\n    email: String;\n    password: String;\n\n}\nexport default function CreateAccount(){\n    const {register, handleSubmit, errors} = useForm<FormData>();\n\n    return <form onSubmit={\n        handleSubmit((formData)=>{\n            console.log(formData, \"formData\");\n        })}>\n        <div>\n            <label htmlFor=\"name\"> First Name</label>\n            <input \n                type=\"text\" \n                name=\"first_name\" \n                id=\"first_name\" \n                ref={register({\n                    required: \"required\",\n                    message: \"Type your first name.\"\n                })} \n            />\n            {errors.first_name ? <div>{errors.first_name.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"name\"> Last Name</label>\n            <input \n                type=\"text\" \n                name=\"last_name\" \n                id=\"last_name\" \n                ref={register({required: \"required\"})} \n            />\n             {errors.last_name ? <div>{errors.last_name.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"email\"> Email</label>\n            <input \n                type=\"email\" \n                name=\"email\" \n                id=\"email\" \n                ref={register({required: \"required\"})} \n            />\n             {errors.email ? <div>{errors.email.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"password\"> Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 8,\n                        message: \"Must be 8 characters long.\",\n                    },\n                    validate: (value) => {\n                        return[\n                            /[a-z]/,\n                            /[A-Z]/,\n                            /[0-9]/,\n                            /[^a-zA-Z0-9]/\n                        ].every((pattern) => \n                        pattern.test(value) \n                        || \"Must contain lowe, upper number, and special character\")\n                    }\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\"> Create Account</button>\n        </div>\n    </form>;\n}"]},"metadata":{},"sourceType":"module"}