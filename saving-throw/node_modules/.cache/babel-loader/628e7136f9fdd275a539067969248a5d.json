{"ast":null,"code":"var _jsxFileName = \"/home/angeldburgos/Documents/SavingThrow/saving-throw/src/Components/CreateAccount/CreateAccount.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\"; //import ReCAPTCHA from \"react-google-recaptcha\";\n\nimport \"./CreateAccount.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateAccount() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    defaultValues: {\n      first_name: \"Bob\",\n      last_name: \"Bobson\",\n      username: \"bobyWillRockU\",\n      email: \"robert@email.com\",\n      password: \"R0b#rt123\"\n    }\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [serverErrors, setServerErrors] = useState([]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(async formData => {\n      setSubmitting(true);\n      setServerErrors([]); // if(submitting){\n      //     return false\n      // }\n\n      console.log(formData, \"formData\");\n      const response = await fetch(\"/create-user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          //formData\n          // if want to uses token(watch video)\n          firstName: formData.first_name,\n          lastName: formData.last_name,\n          username: formData.username,\n          email: formData.email,\n          password: formData.password\n        })\n      });\n      const data = await response.json();\n      console.log(data, \"server data\");\n\n      if (data.errors) {\n        setServerErrors(data.errors);\n      } else {\n        console.log('success');\n      }\n\n      setSubmitting(false);\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"first_name\",\n        id: \"first_name\",\n        ref: register({\n          required: {\n            value: true,\n            message: \"Type your first name.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), errors.first_name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.first_name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"last_name\",\n        id: \"last_name\",\n        ref: register({\n          required: {\n            value: true,\n            message: \"Type your last name.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), errors.last_name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.last_name.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        id: \"username\",\n        ref: register({\n          required: {\n            value: true,\n            message: \"Please enter valid username.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), errors.username ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.username.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        id: \"email\",\n        ref: register({\n          required: {\n            value: true,\n            message: \"Please enter valid email.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.email.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 30\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        ref: register({\n          required: \"required\",\n          minLength: {\n            value: 8,\n            message: \"Must be 8 characters long.\"\n          },\n          validate: value => {\n            return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every(pattern => pattern.test(value)) || \"Must contain lower, upper number, and special character\";\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errors.password.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: submitting,\n        children: \" Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n}\n\n_s(CreateAccount, \"0A+uqX/ZtvKL0UwVuMhu6Dse7z8=\", false, function () {\n  return [useForm];\n});\n\n_c = CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/home/angeldburgos/Documents/SavingThrow/saving-throw/src/Components/CreateAccount/CreateAccount.tsx"],"names":["useState","useForm","CreateAccount","register","handleSubmit","errors","defaultValues","first_name","last_name","username","email","password","submitting","setSubmitting","serverErrors","setServerErrors","formData","console","log","response","fetch","method","headers","body","JSON","stringify","firstName","lastName","data","json","required","value","message","minLength","validate","every","pattern","test"],"mappings":"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","sourcesContent":["import {useRef, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateAccount.css\";\n\n\ninterface FormData {\n    first_name: string;\n    last_name: string;\n    username: string;\n    email: string;\n    password: string;\n\n}\nexport default function CreateAccount(){\n    const {register, handleSubmit, errors,} = useForm<FormData>({\n        defaultValues:{\n            first_name: \"Bob\",\n            last_name: \"Bobson\",\n            username: \"bobyWillRockU\",\n            email: \"robert@email.com\",\n            password: \"R0b#rt123\",\n        }\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            // if(submitting){\n            //     return false\n            // }\n            console.log(formData, \"formData\");\n            \n            const response = await fetch(\"/create-user\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    //formData\n                    // if want to uses token(watch video)\n                    firstName: formData.first_name,\n                    lastName: formData.last_name,\n                    username: formData.username,\n                    email: formData.email,\n                    password: formData.password,\n                })\n            });\n            const data = await response.json();\n            console.log(data, \"server data\");\n            if (data.errors){\n                setServerErrors(data.errors);\n\n            }else{\n                console.log('success');\n            }\n\n            \n\n            setSubmitting(false);\n        })}>\n        <div>\n            <label htmlFor=\"name\">First Name</label>\n            <input \n                type=\"text\" \n                name=\"first_name\" \n                id=\"first_name\" \n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type your first name.\"\n                    }\n                    \n                })} \n            />\n            {errors.first_name ? <div>{errors.first_name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"name\">Last Name</label>\n            <input \n                type=\"text\" \n                name=\"last_name\" \n                id=\"last_name\" \n                ref={register({  required: {\n                    value: true,\n                    message: \"Type your last name.\"\n                }})} \n            />\n             {errors.last_name ? <div>{errors.last_name.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"username\">Username</label>\n            <input \n                type=\"text\" \n                name=\"username\" \n                id=\"username\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid username.\"\n                }})} \n            />\n             {errors.username ? <div>{errors.username.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"email\">Email</label>\n            <input \n                type=\"email\" \n                name=\"email\" \n                id=\"email\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid email.\"\n                }})} \n            />\n             {errors.email ? <div>{errors.email.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 8,\n                        message: \"Must be 8 characters long.\",\n                    },\n                    validate: (value) => {\n                        return [\n                            /[a-z]/,\n                            /[A-Z]/,\n                            /[0-9]/,\n                            /[^a-zA-Z0-9]/,\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain lower, upper number, and special character\";\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Create Account</button>\n        </div>\n    </form>;\n}"]},"metadata":{},"sourceType":"module"}