{"version":3,"sources":["Components/Home/Home.js","Services/authentication.tsx","Images/SavingThrowLogo.png","Components/NavBar/Navbar.tsx","Components/CreateAccount/CreateAccount.tsx","Components/GameManagement/CreateGame/CreateGame.tsx","Components/Login/Login.tsx","Components/Item/datatable.tsx","Components/Item/Item.tsx","Components/CharacterSheet/CharacterSheet.tsx","Components/GamePage/Chat/Chat.tsx","Components/GamePage/GamePage.tsx","Components/GamePage/SquareButton/SquareButton.tsx","Components/Profile/Profile.tsx","Components/Join/JoinGame.tsx","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Home","Fragment","className","React","Component","getUsername","userStr","localStorage","getItem","JSON","parse","isLogged","login","logged","token","username","public_id","fname","new_token","replace","new_publicId","setItem","stringify","getToken","logout","removeItem","NavBar","useState","setLogged","useEffect","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","alt","src","savingThrowLogo","width","height","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","CreateAccount","props","useForm","register","handleSubmit","errors","submitting","setSubmitting","serverErrors","setServerErrors","Card","Body","onSubmit","formData","a","fetch","method","headers","body","firstName","first_name","lastName","last_name","email","password","description","response","json","data","logInresponse","logIndata","window","location","map","error","htmlFor","type","name","ref","required","value","message","validate","every","pattern","test","minLength","rows","cols","maxLength","disabled","CreateGame","isEnabled","setIsEnabled","looking_for","start_date","capacity","Switch","onChange","previousState","min","max","Login","Datatable","addList","columns","cellPadding","cellSpacing","heading","row","column","Items","addInventoryList","setData","isLoading","setIsLoading","q","setQ","searchColumns","setSearchColumns","then","console","log","color","placeholder","e","target","checked","includes","prev","filter","sc","some","toString","toLowerCase","indexOf","item","CharacterSheet","cmid","useParams","inventoryList","FormData","userName","res","csid","parseInt","req","character_response","push","file","files","append","Chat","setMessage","sendMessage","leaveRoom","room","code","onKeyPress","event","key","socket","verifyRoom","Button","border","children","radius","style","backgroundColor","borderRadius","ENDPOINT","GamePage","useHistory","messages","setMessages","fieldRef","useRef","msgRef","checkRoom","on","receiveMsg","current","scrollIntoView","behavior","msg","concat","Number","io","emit","deleteResponse","rollDice","dice","diceVal","Math","floor","random","SquareButton","preventDefault","useStyles","makeStyles","theme","createStyles","container","display","gridTemplateColumns","gridGap","spacing","paper","padding","textAlign","palette","text","secondary","marginBottom","divider","margin","root","flexGrow","overflow","cardroot","maxWidth","media","paddingTop","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","red","box","justifyContent","alignItems","Profile","classes","expandedId","setExpandedId","uid","lname","rendered","userProfile","setUserProfile","allGames","setAllGames","users","id_","password_","deleteOldRooms","rpassword","getUser","getAllCampaigns","length","Typography","gutterBottom","Grid","justify","xs","Paper","wrap","component","Box","m","Divider","game","i","CardContent","CardActions","disableSpacing","IconButton","clsx","handleExpandClick","aria-expanded","aria-label","in","timeout","unmountOnExit","paragraph","createRoom","deleteCampaign","JoinGame","join_response","room_data","App","exact","path","CreateUser","render","to","pathname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69746e4f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n\n        <div className=\"Background\">\n          {/* <Navbar /> */}\n          <div className=\"Title\">\n            Saving Throw\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;","export const getUsername = () => {\n    const userStr = localStorage.getItem('username');\n    if (userStr) return JSON.parse(userStr);\n    else return null;\n}\n\nexport const isLogged = () => {\n    const isLogged = localStorage.getItem('isLogged');\n    if(isLogged) return true;\n    else return false;\n}\n\nexport const login = (logged: boolean, token :string, username: string, public_id: string, fname: string) => {\n    const new_token = token.replace('\"', '')\n    const new_publicId = public_id.replace('\"', \"\")\n    localStorage.setItem('token', new_token);\n    localStorage.setItem('username', JSON.stringify(username));\n    localStorage.setItem('isLogged', JSON.stringify(logged));\n    localStorage.setItem('public_id', new_publicId);\n    localStorage.setItem('fname', JSON.stringify(fname));\n\n}\n\nexport const getToken = () => {\n    return localStorage.getItem('token') || null;\n}\n\nexport const getPublicId = () => {\n    return localStorage.getItem('public_id') || \"\";\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('public_id');\n    localStorage.removeItem('isLogged');\n    \n}","export default __webpack_public_path__ + \"static/media/SavingThrowLogo.6159a385.png\";","import { Navbar, Nav } from \"react-bootstrap\";\nimport { isLogged, getPublicId, getUsername, logout } from \"../../Services/authentication\";\nimport React, { useEffect } from 'react';\nimport savingThrowLogo from '../../Images/SavingThrowLogo.png';\nimport \"./Navbar.css\";\n\nexport default function NavBar() {\n\n    const [logged, setLogged] = React.useState(isLogged());\n\n\n    useEffect(() => { refresh() }\n    )\n\n    function refresh() {\n        if (logged != isLogged()) {\n            setLogged(isLogged())\n        }\n    }\n\n\n    if (logged) {\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n                <Navbar.Brand href=\"/\">\n                    <img\n                        alt=\"\"\n                        src={savingThrowLogo}\n                        width=\"100\"\n                        height=\"50\"\n                        className=\"d-inline-block align-top\"\n                    />\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href={\"/profile/\" + getUsername()}>Profile</Nav.Link>\n                        <Nav.Link href={\"/joinGame\"}>Join Game</Nav.Link>\n                        <Nav.Link href=\"/\" onClick={(logout)}>Logout</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n    else {\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n                <Navbar.Brand href=\"/\" className=\"d-flex align-content-left\">\n                    <img\n                        alt=\"\"\n                        src={savingThrowLogo}\n                        width=\"100\"\n                        height=\"50\"\n                        className=\"d-inline-block align-top\"\n                    />\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href=\"/create-user\">Create account</Nav.Link>\n                        <Nav.Link href=\"/login\">Sign in</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n\n}","import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./CreateAccount.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { login } from \"../../Services/authentication\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\n\n\n\ninterface FormData {\n    first_name: string;\n    last_name: string;\n    username: string;\n    email: string;\n    password: string;\n    description: string;\n\n}\nexport default function CreateAccount(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return (\n        <div className=\"d-flex justify-content-center \">\n            <div className=\"minSize\">\n                <Card>\n                    <Card.Body>\n                        <form onSubmit={handleSubmit(async (formData) => {\n\n                            const response = await fetch(\"api/create\", {\n                                method: \"POST\",\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                },\n                                body: JSON.stringify({\n                                    firstName: formData.first_name,\n                                    lastName: formData.last_name,\n                                    username: formData.username,\n                                    email: formData.email,\n                                    password: formData.password,\n                                    description: formData.description\n                                })\n                            });\n                            const data = await response.json();\n                            if (data == \"Success\") {\n                                const logInresponse = await fetch(\"api/login\", {\n                                    method: \"POST\",\n                                    headers: {\n                                        \"Content-Type\": \"application/json\",\n                                    },\n                                    body: JSON.stringify({\n                                        username: formData.username,\n                                        password: formData.password,\n                                    })\n                                });\n                                const logIndata = await logInresponse.json();\n                                if (logIndata['status'] == \"Success\") {\n                                    login(logIndata['loggedIn'], logIndata['token'], logIndata['username'], logIndata['public_id'], logIndata['fname'])\n                                    window.location.href = '/profile/' + data['username']\n                                }\n                            }\n                            else\n                                setServerErrors([data['error']]);\n\n\n\n                            setSubmitting(false);\n                        })}>\n                            {serverErrors ? (\n                                <ul>\n                                    {serverErrors.map((error) => (\n                                        <li key={error}>{error}</li>\n                                    ))}\n                                </ul>\n                            ) : null}\n                            <h1>Create account</h1>\n                            <div>\n                                <label htmlFor=\"name\">First Name</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"first_name\"\n                                    id=\"first_name\"\n                                    ref={register({\n                                        required: {\n                                            value: true,\n                                            message: \"Type your first name.\"\n                                        },\n                                        validate: (value) => {\n                                            return [\n                                                /[a-z]/,\n                                                /[A-Z]/,\n                                            ].every((pattern) =>\n                                                pattern.test(value))\n                                                || \"Must contain lower and upper character\";\n                                        },\n\n                                    })}\n                                />\n                                {errors.first_name ? <div>{errors.first_name.message} </div> : null}\n                            </div>\n                            <div>\n                                <label htmlFor=\"name\">Last Name</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"last_name\"\n                                    id=\"last_name\"\n                                    ref={register({\n                                        required: {\n                                            value: true,\n                                            message: \"Type your last name.\"\n                                        },\n                                        validate: (value) => {\n                                            return [\n                                                /[a-z]/,\n                                                /[A-Z]/,\n                                            ].every((pattern) =>\n                                                pattern.test(value))\n                                                || \"Must contain lower and upper character\";\n                                        },\n                                    })}\n                                />\n                                {errors.last_name ? <div>{errors.last_name.message} </div> : null}\n                            </div>\n                            <div>\n                                <label htmlFor=\"username\">Username</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"username\"\n                                    id=\"username\"\n                                    ref={register({\n                                        required: {\n                                            value: true,\n                                            message: \"Please enter valid username.\"\n                                        },\n                                    })}\n                                />\n                                {errors.username ? <div>{errors.username.message} </div> : null}\n                            </div>\n                            <div>\n                                <label htmlFor=\"email\">Email</label>\n                                <input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    ref={register({\n                                        required: {\n                                            value: true,\n                                            message: \"Please enter valid email.\"\n                                        }\n                                    })}\n                                />\n                                {errors.email ? <div>{errors.email.message} </div> : null}\n                            </div>\n                            <div>\n                                <label htmlFor=\"password\">Password</label>\n                                <input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    ref={register({\n                                        required: \"required\",\n                                        minLength: {\n                                            value: 8,\n                                            message: \"Must be 8 characters long.\",\n                                        },\n                                        validate: (value) => {\n                                            return [\n                                                /[a-z]/,\n                                                /[A-Z]/,\n                                                /[0-9]/,\n                                                /[^a-zA-Z0-9]/,\n                                            ].every((pattern) =>\n                                                pattern.test(value))\n                                                || \"Must contain lower, upper number, and special character\";\n                                        },\n                                    })}\n                                />\n                                {errors.password ? <div>{errors.password.message} </div> : null}\n                            </div>\n                            <div>\n                                <label htmlFor=\"description\">Description</label>\n                                <div>\n                                    <textarea rows={5} cols={50}\n                                        className=\"description\"\n                                        name=\"description\"\n                                        id=\"description\"\n                                        maxLength={250}\n                                        ref={register({\n                                            required: {\n                                                value: false,\n                                                message: \"Please enter valid username.\"\n                                            },\n                                        })}\n                                    ></textarea>\n                                </div>\n\n                            </div>\n                            <div>\n                                <button type=\"submit\" disabled={submitting}> Create Account</button>\n                            </div>\n                        </form>\n                    </Card.Body>\n                </Card>\n            </div>\n        </div>);\n}","\nimport { Switch } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { getPublicId, getToken, getUsername, logout } from \"../../../Services/authentication\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateGame.css\";\n\n\ninterface FormData {\n    name: string;\n    description: string;\n    start_date: string;\n    password: string;\n    capacity: number;\n}\n\nexport default function CreateGame(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [isEnabled, setIsEnabled] = useState(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    function togglSwitch() { setIsEnabled(previousState => !previousState); };\n    const token = getToken();\n\n    return <form onSubmit={handleSubmit(async (formData) => {\n        setSubmitting(true);\n        setServerErrors([]);\n\n        const response = await fetch(\"/api/create-game\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`\n            },\n            body: JSON.stringify({\n                name: formData.name,\n                description: formData.description,\n                looking_for: isEnabled,\n                start_date: formData.start_date,\n                password: formData.password,\n                capacity: formData.capacity,\n            })                \n\n        });\n        const data = await response.json();\n        if (data['status'] == \"Success\"){\n            window.location.href = '/charactersheet/'+data['cmid']\n        }\n        else{\n            window.location.href='/'\n        }\n    \n\n\n        setSubmitting(false);\n    })}>\n        <div>\n            <label htmlFor=\"name\">Campaign Name</label>\n            <input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type the name of the campaign\"\n                    }\n\n                })}\n            />\n            {errors.name ? <div>{errors.name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"description\">Description</label>\n            <input\n                type=\"text\"\n                name=\"description\"\n                id=\"description\"\n                ref={register({\n                    required: {\n                        value: false,\n                        message: \"Please enter your campaign description\"\n                    }\n                })}\n            />\n            {errors.description ? <div>{errors.description.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"looking_for\">Looking for new players?</label>\n            <Switch\n                onChange={togglSwitch}\n                value={isEnabled}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"password\">Access code? (12 characters max)</label>\n            <input\n                type=\"text\"\n                name=\"password\"\n                id=\"password\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign access code\"\n                    },\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 characters long.\",\n                    },  \n                    maxLength: {\n                        value: 12,\n                        message: \"Must be 8 characters long.\",\n                    },\n                })}\n            />\n            {errors.password ? <div>{errors.password.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"capacity\">How many players? (8 players max)</label>\n            <input\n                type=\"number\"\n                name=\"capacity\"\n                id=\"capacity\"\n                min = \"3\"\n                max = \"8\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign capacity\"\n                    },\n                    validate: (value) => {\n                        return [\n                            /[0-9]/\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain only numbers\";\n                    },\n                })}\n            />\n            {errors.capacity ? <div>{errors.capacity.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"date\">Campaign start date</label>\n            <input\n                type=\"date\"\n                name=\"start_date\"\n                id=\"start_date\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign start date\"\n                    }\n                })}\n            />\n            {errors.start_date ? <div>{errors.start_date.message} </div> : null}\n        </div>\n        <div>\n            <button type=\"submit\" > Create Game</button>\n        </div>\n    </form>;\n}","import { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { isPropertySignature } from \"typescript\";\nimport { login } from \"../../Services/authentication\";\nimport { useHistory } from \"react-router-dom\";\nimport { isLogged, getPublicId, getUsername, logout } from \"../../Services/authentication\";\nimport { Card } from \"react-bootstrap\";\nimport './Login.css';\n\n\n\ninterface FormData {\n    username: string;\n    password: string;\n\n}\nexport default function Login(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return (\n        <div className=\"d-flex justify-content-center\">\n            <div className=\"minSize\">\n                <Card>\n                    <Card.Body>\n                        <form onSubmit={handleSubmit(async (formData) => {\n                            setSubmitting(true);\n                            setServerErrors([]);\n\n                            const response = await fetch(\"/api/login\", {\n                                method: \"POST\",\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                },\n                                body: JSON.stringify({\n                                    username: formData.username,\n                                    password: formData.password,\n                                })\n                            });\n                            const data = await response.json();\n                            if (data['status'] == \"Success\") {\n                                login(data['loggedIn'], data['token'], data['username'], data['public_id'], data['fname'])\n                                window.location.href = '/profile/' + data['username']\n                            }\n                            else {\n                                setServerErrors([data['error']]);\n                            }\n\n\n                            setSubmitting(false);\n                        })}>\n                            {serverErrors ? (\n                                <ul>\n                                    {serverErrors.map((error) => (\n                                        <li key={error}>{error}</li>\n                                    ))}\n                                </ul>\n                            ) : null}\n\n                            <div>\n                                <h1>Login</h1>\n                                <label htmlFor=\"username\"> Username</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"username\"\n                                    id=\"username\"\n                                    ref={register({\n                                        required: {\n                                            value: true,\n                                            message: \"Please enter valid username.\"\n                                        }\n                                    })}\n                                />\n                                {errors.username ? <div>{errors.username.message} </div> : null}\n                            </div>\n                            <div>\n                                <label htmlFor=\"password\"> Password</label>\n                                <input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    ref={register({ required: \"required\" })}\n                                />\n                                {errors.password ? <div>{errors.password.message} </div> : null}\n                            </div>\n                            <div>\n                                <button type=\"submit\" disabled={submitting}> Login </button>\n                            </div>\n                        </form>\n                    </Card.Body>\n                </Card>\n            </div>\n\n\n        </div>\n\n    );\n}","import React from \"react\"\nimport './datatable.css'\nexport default function Datatable({ data, addList } : any){\n\n\n    const columns = [ \"name\", \"effect\", \"description\", \"damage\"]\n    return(\n        <table className=\"table-border\" cellPadding={1} cellSpacing={1}> \n            <thead className=\"table-border\">\n                {/* Display headers */}\n                <tr >{data[0] && columns.map((heading : any) => <th className=\"table-border\">{heading}</th>)}</tr>\n            </thead>\n            <tbody className=\"table-border\">\n                {/* Iterate over data and dislpay each row */}\n                {data.map((row : any) => \n                    <tr onClick= {() => addList(row)} className=\"table-border\">\n                        {columns.map((column : any) => \n                            <td className=\"table-border\">{row[column]}</td>\n                        )}\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    );\n}","import { render } from '@testing-library/react'\nimport React, {useState, useEffect} from 'react'\nimport Datatable from \"./datatable\"\nimport Loader from \"react-loader-spinner\"\n\n\nexport default function Items({addInventoryList}: any){\n    // Store data. Returns a tuble: (Get, Set}\n    \n    const [data, setData] = useState([])\n    const [list, setList] = useState([])\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    // Query filter\n    const [q, setQ] = useState(\"\")\n    const [searchColumns, setSearchColumns] = useState([\"name\", \"effect\"])\n    // Columns hardcoded\n    const [columns, setColumns] = useState([\"name\", \"effect\", \"description\", \"damage\"])\n\n    // // Load data into useState()\n    useEffect(() => {\n        fetch('/api/itemSearch')\n        .then((response) => response.json())\n        .then((json) => setData(json));\n        setIsLoading(false)\n    }, []);\n\n    const addList  = (item: any) => {\n        addInventoryList(item)\n    }\n\n    function search(rows: any[]){\n        return rows.filter(\n            (row) => \n            searchColumns.some((column) => row[column].toString().toLowerCase().indexOf(q.toLowerCase()) > -1)\n        );\n    }\n\n    if(isLoading){\n        console.log(\"inside loading\")\n\n        return(\n            <Loader \n            type=\"Circles\"\n            color=\"#00BFFF\"\n            height={60}\n            width={80}/>\n        )\n        \n    }\n    else{\n        return (\n            <div >\n                {/* Filter */}\n                <div> \n                    {/* e -> event that happens every time a char is input\n                    e.target.value -> text in textbox */}\n                    <input type=\"text\" placeholder=\"Search for item\" value={q} onChange={(e) => setQ(e.target.value)}/>\n                    {\n                        // Check columns filter\n                        columns && columns.map((column : any) => <label>\n                            {/* Checkbox */} \n                            <input type=\"checkbox\" checked={searchColumns.includes(column)}\n                            // Changed check\n                            onChange={(e) => {\n                                const checked = searchColumns.includes(column)\n                                setSearchColumns(prev => checked\n                                    ? prev.filter(sc => sc !== column)\n                                    : [...prev, column])\n                            }}/>\n                        {column}</label>)}\n                </div>\n    \n                    {/* Data table */}\n                <div>\n                    <Datatable \n                    data = {search(data)}\n                    addList = {addList}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n}","import React,  { useEffect }  from \"react\";\nimport { useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useParams } from \"react-router\";\nimport { getToken, getUsername } from \"../../Services/authentication\";\nimport Inventory from \"../Inventory/Inventory\";\nimport Items from '../Item/Item';\n\ninterface ParamTypes {\n    cmid: string\n\n}\nexport default function CharacterSheet(props: { history: string[]; }) {\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [updated, setUpdated] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    let { cmid } = useParams<ParamTypes>();\n    let inventoryList: any = [];\n    const formData = new FormData();\n    const token = getToken();\n    const userName = getUsername();\n\n    const addInventoryList = (item: any) => {\n        inventoryList.push(item)\n    }\n    const removeInventoryList = (item: any) => {\n        setUpdated(true)\n        console.log('test')\n    }\n    \n    function handleChange(e: any) {\n        let file = e.target.files[0];\n        formData.append(\"characterSheet\", file)\n    }\n\n    async function handleSubmit() {\n        setSubmitting(true);\n        setServerErrors([]);\n        const response = await fetch(\"/api/create-charactersheet\", {\n            method: \"POST\",\n            headers: {\n                \"x-Access-Token\": `${token}`\n            },\n            body: formData\n\n        });\n        const res = await response.json();\n        if (res['status'] == \"Success\") {\n            let body = {\n                csid: res['csid'],\n                cmid: parseInt(cmid),\n                inventoryList: inventoryList\n            }\n            let req = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    \"x-Access-Token\": `${token}`\n                },\n                body: JSON.stringify(body)\n            }\n            const character_response = await fetch(\"/api/create-character\", req);\n            const character_res = await character_response.json();\n            if (character_res['status'] == 'Success') {\n                window.location.href = '/profile/' + userName;\n            }\n        }\n        else {\n            setServerErrors([res['error']]);\n        }\n\n\n\n        setSubmitting(false);\n    }\n\n    return (\n        <div>\n            <Card>\n            <div className=\"d-flex justify-content-center \">\n            <div className=\"d-flex flex-column\">\n                <Card>\n                    <Card.Body>\n                        <h3>Items list: </h3>\n                        <Items addInventoryList={addInventoryList} ></Items>\n                    </Card.Body>\n                </Card>\n                {/* <div className=\"minHeight\">\n                    <Card>\n                        <Card.Body>\n                            <h3>inventory list: </h3>\n                            {\n                                updated && <Inventory data={inventoryList} removeList = {removeInventoryList} setUpdated={setUpdated}></Inventory>\n                            }\n                            \n                        </Card.Body>\n                    </Card>\n                </div> */}\n\n                <div>\n                    {serverErrors ? (\n                        <ul>\n                            {serverErrors.map((error) => (\n                                <li key={error}>{error}</li>\n                            ))}\n                        </ul>\n                    ) : null}\n                    <div>\n                        <Card>\n                            <Card.Body>\n                                <div>\n                                    <h3>Upload character sheet: </h3>\n                                    <input onChange={handleChange} type=\"file\" name=\"file\" />\n                                </div>\n                            </Card.Body>\n                        </Card>\n                        <div>\n                            <button type=\"submit\" onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n            </Card>\n        </div>\n    )\n\n}","import { Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport \"./Chat.css\";\n\ninterface ParamTypes {\n    room: string,\n    code: string,\n    // cname: string\n  }\n\n\nexport default function Chat({ setMessage, sendMessage, message, leaveRoom  }: { setMessage: any, sendMessage: any, message: any, leaveRoom: any  }){     \n    let {room, code} = useParams<ParamTypes>();\n    return (\n        <div>\n            <form className=\"chat-form\">\n                <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Type a message...\"\n                    value={message}\n                    onChange={({ target: { value } }) => setMessage(value)}\n                    onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\n                />\n                <Button variant=\"contained\" onClick={e => sendMessage(e)}>Send</Button>\n                <Button variant=\"contained\" onClick={async() => {await leaveRoom()}}>Leave Chat</Button>\n            </form>\n        </div>\n\n    )\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport openSocket, {io, Socket} from 'socket.io-client';\nimport Chat from './Chat/Chat'\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\nimport \"./GamePage.css\";\nimport {getToken, logout, getUsername} from \"../../Services/authentication\";\nimport { useHistory, useParams } from \"react-router\";\nimport SquareButton from \"./SquareButton/SquareButton\"\nimport { Button, Grid } from \"@material-ui/core\";\n\n\n\n\nconst ENDPOINT = 'https://saving-throw.herokuapp.com/'\nlet socket: Socket<DefaultEventsMap, DefaultEventsMap>;\nlet verifyRoom: boolean;\n\n\ninterface ParamTypes {\n    room: string,\n    code: string\n  }\n\nexport default function GamePage(props: { history: string[];}){\n    let history = useHistory();\n    let {room, code} = useParams<ParamTypes>();\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState<string[]>([]);\n    const [join, setJoin] = useState<boolean>(false);\n    const userName = getUsername();\n    const fieldRef = React.useRef<HTMLInputElement>(null);\n    let msgRef = messages;\n    const token = getToken();\n\n    useEffect(() => {\n        verifyRoom = false;\n        checkRoom();\n\n    }, [ENDPOINT]);\n\n    useEffect(() => {\n       if(verifyRoom){\n            socket.on('close',function() {\n                window.location.href='/profile/'+userName\n            });\n\n            socket.on('message', message => {\n                receiveMsg(message);\n                if(message === \"Close Room.\"){\n                    leaveRoom();\n                }\n            });\n         \n            if (messages && fieldRef.current) {\n                fieldRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                });\n            }  \n        }\n    },[]);\n\n\n    const sendMessage = (event: any) => {\n        event.preventDefault();\n    \n        if(message) {\n            socket.emit('message',{ name: userName, room: Number(room), message: message}, () => setMessage(''));\n        }\n    } \n    \n\n    function receiveMsg(msg: string){\n        msgRef = msgRef.concat(msg)\n        setMessages(msgRef)\n    }\n\n    async function checkRoom(){\n        const response = await fetch('/api/check-room', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`,\n            },\n            body: JSON.stringify({\n                room: Number(room),\n                code: code\n            })\n          });\n        const data = await response.json();\n        if( data['status'] == \"Success\"){\n            verifyRoom = true;\n            socket = io(ENDPOINT);\n            socket.emit('join', { name: userName, room: Number(room)});\n            socket.on('message', message => {\n                receiveMsg(message);\n                if(message === \"Close Room.\"){\n                    leaveRoom();\n                }\n            });\n\n        }\n        if(data['error'] == \"Room does not exist\"){\n            window.location.href='/profile/'+userName\n        }\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n          }\n\n\n\n    }\n\n\n\n    async function leaveRoom(){\n        const response = await fetch('/api/leave-room', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`\n            },\n            body: JSON.stringify({\n                room: Number(room),\n                code: code\n            })\n          });\n        const data = await response.json();\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n        }\n        if(data['error']){\n            socket.emit('close', {name: userName, room: data.room})\n            window.location.href='/profile/'+userName\n        }else{\n            socket.emit('leave', { name: userName, room: Number(room), message: data['message']});\n            if(data['status'] === \"Host is leaving\" || data['status'] === \"Room is empty\"){\n                socket.emit('close', {name: userName, room: data.room})\n                const deleteResponse = await fetch('/api/delete-room', {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-Access-Token\" : `${token}`\n            \n                    },\n                    body: JSON.stringify({\n                        room: Number(room),\n                    })\n                });\n                const deleteData = await deleteResponse.json();\n            }\n        }\n  \n        window.location.href='/profile/'+userName\n\n        //     socket.emit('leave', { name: data.name, room: data.room  });\n\n    }\n    function getRandomInt(max: number) {\n        // if max is 3, function will return 0, 1 or 2\n        return Math.floor(Math.random() * max);\n    }\n\n    function rollDice(dice: number){\n        let diceVal = getRandomInt(dice)+1\n        socket.emit('message',{ name: userName, room: Number(room), message: \"Rolled d\"+ dice+ \": \" + diceVal}, () => setMessage(''));\n    }\n  \n\n    return (\n        <div>\n            <h1 className=\"title\">Campaign</h1>\n            <h3 className=\"room\">Room: {room} Code: {code}</h3>\n\n        <div className=\"container\"> \n                <div className=\"box\"> \n\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"15vh\"\n                            onClick={() => {rollDice(20)}}\n                            radius = \"10%\"\n                            width = \"30vw\"\n                            children = \"d20\"\n                        />  \n                    </div>\n\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(4)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d4\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(6)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d6\"\n                        />\n                            <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(8)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d8\"\n                        />\n                 \n                    </div>\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(10)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d10\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(12)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d12\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(100)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d100\"\n                        />\n                    </div>\n                      \n\n                            \n                </div>\n            </div>\n            <div className=\"Chat\">\n                <div className=\"fields\" ref={fieldRef}>\n                        {messages.map((item)=>(\n                                <div>{item}</div>\n                            ))}\n\n                </div>\n\n                <Chat message={message} setMessage={setMessage} sendMessage={sendMessage} leaveRoom={leaveRoom}/>\n            </div>        \n                \n\n        </div>\n\n    )\n}","import React from \"react\";\n\ninterface Props {\n  border: string;\n  color: string;\n  children?: React.ReactNode;\n  height: string;\n  onClick: () => void;\n  radius: string\n  width: string;\n}\n\nconst Button: React.FC<Props> = ({ \n    border,\n    color,\n    children,\n    height,\n    onClick, \n    radius,\n    width\n  }) => { \n  return (\n    <button \n      onClick={onClick}\n      style={{\n         backgroundColor: color,\n         border,\n         borderRadius: radius,\n         height,\n         width\n      }}\n    >\n    {children}\n    </button>\n  );\n}\n\nexport default Button;","//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./Profile.css\";\nimport React, { useEffect } from 'react';\nimport { Link, useParams } from \"react-router-dom\";\nimport { isLogged, getUsername, getToken, logout } from \"../../Services/authentication\";\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport { red } from '@material-ui/core/colors';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { Box } from \"@material-ui/core\";\n\nimport GamePage from \"../GamePage/GamePage\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(12, 1fr)',\n      gridGap: theme.spacing(3),\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n    divider: {\n      margin: theme.spacing(2, 0),\n    },\n    root: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      padding: theme.spacing(0, 3),\n\n    },\n    cardroot: {\n      maxWidth: 'auto',\n      margin: 'auto',\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n    box: {\n      height: 50,\n      display: \"flex\",\n      padding: 8,\n      justifyContent: \"flex-end\",\n      alignItems: \"flex-end\"\n    },\n  }),\n);\n\ninterface ParamTypes {\n  username: string\n}\n\n\n\nexport default function Profile(props: { history: any[]; }) {\n  const token = getToken();\n  const classes = useStyles();\n  const [expandedId, setExpandedId] = React.useState(-1);\n  const [expandedFriendId, setExpandedFriendId] = React.useState(-1);\n  const [userProfile, setUserProfile] = React.useState({\n    data: {\n      username: \"\",\n      uid: 0,\n      public_id: 0,\n      fname: \"\",\n      lname: \"\",\n      description: \"\",\n    },\n    rendered: false\n  });\n  const [allGames, setAllGames] = React.useState([]);\n  let { username } = useParams<ParamTypes>();\n\n\n  async function getUser() {\n    const response = await fetch('/api/user', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-Access-Token\": `${token}`\n\n      }\n    });\n    const users = await response.json();\n    if (users['status'] == \"Token is invalid!\") {\n      logout();\n      window.location.href = '/'\n    }\n    else {\n      if (users['username'] != username) {\n        window.location.href = \"/profile/\" + users['username']\n      }\n      setUserProfile({\n        data: {\n          username: users['username'],\n          uid: users['uid'],\n          public_id: users['publicId'],\n          fname: users['fname'],\n          lname: users['lname'],\n          description: users['description']\n\n        },\n        rendered: true\n      });\n      console.log(userProfile)\n    }\n\n\n  }\n\n  async function getAllCampaigns() {\n    const response = await fetch('/api/getgames', {\n      method: \"GET\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-Access-Token\" : `${token}`\n\n      },\n    });\n    const data = await response.json();\n\n    if(data['status'] == \"Token is invalid!\"){\n      logout();\n      window.location.href='/'\n\n    }\n    if(data['status'] == \"Success\"){\n        setAllGames(data['games']);\n    }\n\n\n  }\n\n  async function createRoom(id_: number, password_: string) {\n    await deleteOldRooms()\n    const response = await fetch('/api/create-room', {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-Access-Token\" : `${token}`\n\n      },\n      body: JSON.stringify({\n        rpassword: password_,\n        cmid: id_\n      })\n    });\n    const data = await response.json();\n\n    if(data['status'] == \"Success\"){\n      window.location.href=\"/gamePage/room=\"+data['room']+\"&code=\"+data['password']\n    }\n    \n    if(data['status'] == \"Token is invalid!\"){\n      logout();\n      window.location.href='/'\n    }\n\n\n  }\n\n  async function deleteOldRooms() {\n    const response = await fetch('/api/delete-room', {\n      method: \"DELETE\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-Access-Token\" : `${token}`\n\n      },\n    });\n    const data = await response.json();\n\n  }\n\n\n  async function deleteCampaign(id_: number, password_: string) {\n    const response = await fetch('/api/delete-game', {\n      method: \"DELETE\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-Access-Token\" : `${token}`\n\n      },\n      body: JSON.stringify({\n        rpassword: password_,\n        cmid: id_\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n\n    if(data['status'] == \"Token is invalid!\"){\n      logout();\n    }\n    if(data['status'] == \"Success\"){\n      window.location.href=\"/profile/\"+getUsername()\n    }\n\n\n  }\n\n\n\n  useEffect(() => {\n    if (!userProfile.rendered) {\n      getUser();\n    }\n  }, []);\n\n  useEffect(() => {\n    getAllCampaigns();\n  }, []);\n\n\n  const games = [{ _id: \"1\" }, { _id: \"2\" }, { _id: \"3\" }];\n  const friends = [{ _id: \"1\", name: \"Carlos\" }, { _id: \"2\", name: \"Miguel\" }, { _id: \"3\", name: \"Amanda\" }];\n\n\n  const handleExpandClick = (i: number) => {\n    setExpandedId(expandedId === i ? -1 : i);\n  };\n  const handleExpandClickFriend = (i: number) => {\n    setExpandedFriendId(expandedFriendId === i ? -1 : i);\n  };\n\n\n  if (allGames.length == 0) {\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h4\" gutterBottom>\n          {userProfile.data.fname}\n        </Typography>\n        <Grid container spacing={1} justify=\"center\" alignItems='center'>\n          <Grid item xs={4}>\n            <Paper className={classes.paper}>\n              Games\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                <Grid item xs>\n                  <Typography component={'span'}>\n                    No Games\n                    </Typography>\n                  <Box component=\"span\" m={1} className={classes.box}>\n                    <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} href=\"/create-game\" >\n                      Add\n                        </Button>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid item xs={4}>\n            <Paper className={classes.paper}>\n              Friends\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                <Grid item xs>\n                  <Typography component={'span'}>\n                    No Friends\n                    </Typography>\n                  {/* <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} >\n                          Add\n                        </Button>\n                    </Box> */}\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={4}>\n            <Grid container>\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  <h6>User Description</h6>\n                  <p>{userProfile.data.description}</p>\n                </Paper>\n\n              </Grid>\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  Character List\n                    </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n\n\n        </Grid>\n        <Divider className={classes.divider} />\n\n      </div>\n\n    )\n\n  }\n  else {\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h4\" gutterBottom>\n          {userProfile.data.fname}\n        </Typography>\n        <Grid container spacing={1} justify=\"center\" alignItems='center'>\n          <Grid item xs={4}>\n            <Paper className={classes.paper}>\n              Games\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                <Grid item xs>\n                  <Typography component={'span'}>\n\n                    {allGames.map((game, i) => (\n                      <Card className={classes.cardroot} key={game['cmid']}>\n                        {game['cname']}\n                        <CardContent />\n                        <CardActions disableSpacing>\n                          <IconButton\n                            className={clsx(classes.expand, {\n                              [classes.expandOpen]: expandedId,\n                            })}\n                            onClick={() => handleExpandClick(i)}\n                            aria-expanded={expandedId === i}\n                            aria-label=\"show more\"\n                          >\n                            <ExpandMoreIcon />\n                          </IconButton>\n                        </CardActions>\n                        <Collapse in={expandedId === i} timeout=\"auto\" unmountOnExit>\n                          <CardContent>\n                            <Typography paragraph>Description:</Typography>\n                            <Typography paragraph>\n                              {game['cdescription']}\n                            </Typography>\n                            <Typography>Entry Code</Typography>\n                            <Typography>{game['password']}</Typography>\n                            <Box component=\"span\" m={1} className={classes.box}>\n\n                            <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { createRoom(game['cmid'], game['password'])}}>                      \n                                Play\n                              </Button>\n                              <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { deleteCampaign(game['cmid'], game['password']) }}>\n                                Delete\n                              </Button>\n                            </Box>\n                          </CardContent>\n                        </Collapse>\n                      </Card>\n                    ))}\n                    <Box component=\"span\" m={1} className={classes.box}>\n                      <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} href=\"/create-game\" >\n                        Add\n                        </Button>\n                    </Box>\n\n\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid item xs={4}>\n            <Paper className={classes.paper}>\n              Friends\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                <Grid item xs>\n                  <Typography component={'span'}>\n                    No Friends to display\n                    </Typography>\n                  {/* <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} >\n                          Add\n                        </Button>\n                    </Box> */}\n                </Grid>\n              </Grid>\n            </Paper>\n            {/* <Paper className={classes.paper}>\n                Friends\n  \n                  {friends.map((friend, i) => (\n                        <Card className={classes.cardroot} key={friend._id}>\n                          {friend.name}\n                          <CardContent />\n                          <CardActions disableSpacing>\n                            <IconButton\n                              className={clsx(classes.expand, {\n                                [classes.expandOpen]: expandedFriendId,\n                              })}\n                              onClick={() => handleExpandClickFriend(i)}\n                              aria-expanded={expandedFriendId === i}\n                              aria-label=\"show more\"\n                            >\n                              <ExpandMoreIcon />\n                            </IconButton>\n                          </CardActions>\n                          <Collapse in={expandedFriendId === i} timeout=\"auto\" unmountOnExit>\n                            <CardContent>\n                              <div>Description:</div>\n                              \n                            </CardContent>\n                          </Collapse>\n                        </Card>\n                      ))}\n                    <Box component=\"span\" m={1} className={classes.box}>\n                      <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { alert('clicked') }}>\n                        Add\n                      </Button>\n                    </Box>\n              </Paper> */}\n          </Grid>\n\n          <Grid item xs={4}>\n            <Grid container>\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  <h6>User Description</h6>\n                  <p>{userProfile.data.description}</p>\n                </Paper>\n              </Grid>\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  Character List\n                    </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n\n\n        </Grid>\n        <Divider className={classes.divider} />\n\n      </div>\n\n    )\n  }\n}\n","import {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./JoinGame.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {getToken, login} from \"../../Services/authentication\";\n\n\n\n\ninterface FormData {\n    room: number;\n    password: string;\n\n}\nexport default function JoinGame(props: { history: string[]; }){\n    const {register, handleSubmit, errors,} = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    const token = getToken();\n\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            \n            const response = await fetch(\"api/get-character\", {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-Access-Token\" : `${token}`\n                },\n                body: JSON.stringify({\n                    room: formData.room,\n                    password: formData.password\n                })\n            });\n            const data = await response.json();\n            \n            if(data['status'] == \"Does not exist\"){\n                window.location.href=\"/charactersheet/\"+data['cmid']\n            }\n            if(data['status'] == 'Character exists'){\n                const join_response = await fetch(\"api/join-room\", {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-Access-Token\" : `${token}`\n                    },\n                    body: JSON.stringify({\n                        room: formData.room,\n                        password: formData.password,\n                    })\n                });\n                const room_data = await join_response.json();\n                if (room_data['status'] == \"Success\"){\n                    window.location.href=\"/gamePage/room=\"+room_data['room']+\"&code=\"+room_data['password']\n                }\n                else\n                    setServerErrors([data['error']]);\n            }\n            if(data['status'] == \"Token is invalid!\"){\n                window.location.href='/'\n            }\n            else\n                setServerErrors([data['error']]);\n            setSubmitting(false);\n        })}>\n            {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => ( \n                <li key={error}>{error}</li>\n                ))}\n            </ul>\n           ): null }\n\n        <div>\n            <label htmlFor=\"name\">Room Number</label>\n            <input \n                type=\"text\" \n                name=\"room\" \n                id=\"room\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 character long\"\n                    },\n                    maxLength: {\n                        value: 4,\n                        message: \"Must be 4 character long\"\n                    },\n                    validate: (value) => {\n                        return [\n                            /[0-9]/\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain only numbers\";\n                    },\n                    \n                })} \n            />\n            {errors.room ? <div>{errors.room.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 characters long.\",\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Join</button>\n        </div>\n    </form>;\n}","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Home from \"../Home/Home\";\nimport Navbar from \"../NavBar/Navbar\"\nimport CreateUser from \"../CreateAccount/CreateAccount\"\nimport CreateGame from '../GameManagement/CreateGame/CreateGame';\nimport Login from \"../Login/Login\"\nimport CharacterSheet from \"../CharacterSheet/CharacterSheet\"\nimport GamePage from \"../GamePage/GamePage\"\nimport Profile from \"../Profile/Profile\"\nimport JoinGame from \"../Join/JoinGame\"\nimport { isLogged } from '../../Services/authentication';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/create-user\" component={CreateUser} />\n          <Route exact path=\"/create-game\" render={props => (isLogged() !== false ? (<CreateGame />) : (<Redirect to={{ pathname: \"/Login\" }} />))}/>\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/profile/:username\" component={Profile} />\n          <Route exact path=\"/charactersheet/:cmid\" render={props => (isLogged() !== false ? (<CharacterSheet />) : (<Redirect to={{ pathname: \"/Login\" }} />))} />\n          <Route exact path=\"/gamePage/room=:room&code=:code\" component={GamePage} />\n          <Route exact path=\"/joinGame\" render={props => (isLogged() !== false ? (<JoinGame />) : (<Redirect to={{ pathname: \"/Login\" }} />))} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Router>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}