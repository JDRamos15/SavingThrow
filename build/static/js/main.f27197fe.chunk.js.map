{"version":3,"sources":["Components/Home/Home.js","Services/authentication.tsx","Components/NavBar/Navbar.tsx","Components/CreateAccount/CreateAccount.tsx","Components/GameManagement/CreateGame/CreateGame.tsx","Components/Login/Login.tsx","Components/CharacterSheet/CharacterSheet.tsx","Components/GamePage/Chat/Chat.tsx","Components/GamePage/GamePage.tsx","Components/GamePage/SquareButton/SquareButton.tsx","Components/Profile/Profile.tsx","Components/Join/JoinGame.tsx","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Home","Fragment","className","React","Component","getUsername","userStr","localStorage","getItem","JSON","parse","isLogged","login","logged","token","username","public_id","fname","new_token","replace","new_publicId","setItem","stringify","getToken","getPublicId","logout","removeItem","NavBar","useState","setLogged","useEffect","console","log","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","CreateAccount","props","useForm","defaultValues","first_name","last_name","email","password","register","handleSubmit","errors","submitting","setSubmitting","serverErrors","setServerErrors","onSubmit","formData","a","fetch","method","headers","body","firstName","lastName","response","json","data","logInresponse","logIndata","history","push","map","error","htmlFor","type","name","ref","required","value","message","minLength","validate","every","pattern","test","disabled","CreateGame","isEnabled","setIsEnabled","description","looking_for","start_date","capacity","Switch","onChange","previousState","Login","window","location","CharacterSheet","FormData","append","file","res","Chat","setMessage","sendMessage","leaveRoom","placeholder","target","onKeyPress","event","key","e","socket","verifyRoom","Button","border","color","children","height","radius","width","style","backgroundColor","borderRadius","ENDPOINT","GamePage","useHistory","useParams","room","code","messages","setMessages","userName","fieldRef","useRef","msgRef","checkRoom","on","receiveMsg","current","scrollIntoView","behavior","msg","concat","Number","io","emit","deleteResponse","deleteData","rollDice","dice","max","diceVal","Math","floor","random","SquareButton","item","preventDefault","useStyles","makeStyles","theme","createStyles","container","display","gridTemplateColumns","gridGap","spacing","paper","padding","textAlign","palette","text","secondary","marginBottom","divider","margin","root","flexGrow","overflow","cardroot","maxWidth","media","paddingTop","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","red","box","justifyContent","alignItems","Profile","classes","expandedId","setExpandedId","expandedFriendId","setExpandedFriendId","uid","lname","rendered","userProfile","setUserProfile","allGames","setAllGames","publicId","users","id_","password_","rpassword","cmid","getUser","getAllCampaigns","length","Typography","gutterBottom","Grid","justify","xs","Paper","wrap","component","Box","m","Divider","game","i","Card","CardContent","CardActions","disableSpacing","IconButton","clsx","handleExpandClick","aria-expanded","aria-label","in","timeout","unmountOnExit","paragraph","createRoom","_id","friend","handleExpandClickFriend","alert","JoinGame","maxLength","App","exact","path","CreateUser","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f27197fe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n\n        <div className=\"Background\">\n          {/* <Navbar /> */}\n          <div className=\"Title\">\n            Saving Throw\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;","export const getUsername = () => {\n    const userStr = localStorage.getItem('username');\n    if (userStr) return JSON.parse(userStr);\n    else return null;\n}\n\nexport const isLogged = () => {\n    const isLogged = localStorage.getItem('isLogged');\n    if(isLogged) return true;\n    else return false;\n}\n\nexport const login = (logged: boolean, token :string, username: string, public_id: string, fname: string) => {\n    const new_token = token.replace('\"', '')\n    const new_publicId = public_id.replace('\"', \"\")\n    localStorage.setItem('token', new_token);\n    localStorage.setItem('username', JSON.stringify(username));\n    localStorage.setItem('isLogged', JSON.stringify(logged));\n    localStorage.setItem('public_id', new_publicId);\n    localStorage.setItem('fname', JSON.stringify(fname));\n\n}\n\nexport const getToken = () => {\n    return localStorage.getItem('token') || null;\n}\n\nexport const getPublicId = () => {\n    return localStorage.getItem('public_id') || \"\";\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('public_id');\n    localStorage.removeItem('isLogged');\n    \n}","import { Navbar, Nav } from \"react-bootstrap\";\nimport {isLogged,getPublicId, getUsername, logout} from \"../../Services/authentication\";\nimport React, {useEffect} from 'react';\nimport \"./Navbar.css\";\n\nexport default function NavBar() {\n\n    const [logged, setLogged] = React.useState(isLogged());\n\n\n    useEffect (() => \n    {refresh()}\n    )\n    \n    function refresh(){\n        console.log(\"here\")\n        if(logged != isLogged()){\n            setLogged(isLogged())\n        }\n    }\n   \n\n    if(logged){\n        return(\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\"><h1>Saving Throw</h1></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Link href={\"/profile/\"+getUsername()}>Profile</Nav.Link>\n                    <Nav.Link href={\"/joinGame\"}>Join Game</Nav.Link>\n                    <Nav.Link href=\"/\" onClick = {(logout)}>Logout</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n            </Navbar>\n            );\n    }\n    else{\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"/\"><h1>Saving Throw</h1></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href=\"/create-user\">Create account</Nav.Link>\n                        <Nav.Link href=\"/login\">Sign in</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n    \n}","import {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateAccount.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {login} from \"../../Services/authentication\";\n\n\n\n\ninterface FormData {\n    first_name: string;\n    last_name: string;\n    username: string;\n    email: string;\n    password: string;\n\n}\nexport default function CreateAccount(props: { history: string[]; }){\n    const {register, handleSubmit, errors,} = useForm<FormData>({\n        defaultValues:{\n            first_name: \"\",\n            last_name: \"\",\n            username: \"\",\n            email: \"\",\n            password: \"\",\n        }\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            // if(submitting){\n            //     return false\n            // }\n            console.log(formData, \"formData\");\n            \n            const response = await fetch(\"api/create\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    firstName: formData.first_name,\n                    lastName: formData.last_name,\n                    username: formData.username,\n                    email: formData.email,\n                    password: formData.password,\n                })\n            });\n            const data = await response.json();\n            if (data == \"Success\"){\n                const logInresponse = await fetch(\"api/login\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        username: formData.username,\n                        password: formData.password,\n                    })\n                });\n                const logIndata = await logInresponse.json();\n                if (logIndata['status'] == \"Success\"){\n                    console.log(logIndata)\n                    login(logIndata['loggedIn'], logIndata['token'], logIndata['username'], logIndata['public_id'], logIndata['fname'])\n                    props.history.push('/profile/'+logIndata['username']);\n                }\n            }\n            else\n                setServerErrors([data['error']]);\n                \n            \n\n            setSubmitting(false);\n        })}>\n            {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => ( \n                <li key={error}>{error}</li>\n                ))}\n            </ul>\n           ): null }\n\n        <div>\n            <label htmlFor=\"name\">First Name</label>\n            <input \n                type=\"text\" \n                name=\"first_name\" \n                id=\"first_name\" \n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type your first name.\"\n                    }\n                    \n                })} \n            />\n            {errors.first_name ? <div>{errors.first_name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"name\">Last Name</label>\n            <input \n                type=\"text\" \n                name=\"last_name\" \n                id=\"last_name\" \n                ref={register({  required: {\n                    value: true,\n                    message: \"Type your last name.\"\n                }})} \n            />\n             {errors.last_name ? <div>{errors.last_name.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"username\">Username</label>\n            <input \n                type=\"text\" \n                name=\"username\" \n                id=\"username\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid username.\"\n                }})} \n            />\n             {errors.username ? <div>{errors.username.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"email\">Email</label>\n            <input \n                type=\"email\" \n                name=\"email\" \n                id=\"email\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid email.\"\n                }})} \n            />\n             {errors.email ? <div>{errors.email.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 8,\n                        message: \"Must be 8 characters long.\",\n                    },\n                    validate: (value) => {\n                        return [\n                            /[a-z]/,\n                            /[A-Z]/,\n                            /[0-9]/,\n                            /[^a-zA-Z0-9]/,\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain lower, upper number, and special character\";\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Create Account</button>\n        </div>\n    </form>;\n}","\nimport { Switch } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { getPublicId, getToken, getUsername } from \"../../../Services/authentication\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateGame.css\";\n\n\ninterface FormData {\n    name: string;\n    description: string;\n    start_date: string;\n    password: string;\n    capacity: number;\n}\nexport default function CreateGame(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [isEnabled, setIsEnabled] = useState(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    function togglSwitch() { setIsEnabled(previousState => !previousState); };\n    const token = getToken();\n\n    return <form onSubmit={handleSubmit(async (formData) => {\n        setSubmitting(true);\n        setServerErrors([]);\n\n        console.log(getPublicId())\n        const response = await fetch(\"/api/create-game\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`\n            },\n            body: JSON.stringify({\n                name: formData.name,\n                description: formData.description,\n                // dm_uid: 1,\n                looking_for: isEnabled,\n                start_date: formData.start_date,\n                password: formData.password,\n                capacity: formData.capacity,\n            })                // dm_uid: 1,\n\n        });\n        const data = await response.json();\n        if (data == \"Success\"){\n            console.log(data[0], \":Server Data\");\n            props.history.push('/profile/'+getUsername());\n        }\n        else\n            console.log(\"Wrong\");\n\n\n        setSubmitting(false);\n    })}>\n        <div>\n            <label htmlFor=\"name\">Campaign Name</label>\n            <input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type the name of the campaign\"\n                    }\n\n                })}\n            />\n            {errors.name ? <div>{errors.name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"description\">Description</label>\n            <input\n                type=\"text\"\n                name=\"description\"\n                id=\"description\"\n                ref={register({\n                    required: {\n                        value: false,\n                        message: \"Please enter your campaign description\"\n                    }\n                })}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"looking_for\">Looking for new players?</label>\n            <Switch\n                onChange={togglSwitch}\n                value={isEnabled}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"password\">Access code? (12 characters max)</label>\n            <input\n                type=\"text\"\n                name=\"password\"\n                id=\"password\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign access code\"\n                    }\n                })}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"capacity\">How many players? (8 players max)</label>\n            <input\n                type=\"number\"\n                name=\"capacity\"\n                id=\"capacity\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign capacity\"\n                    }\n                })}\n            />\n            {errors.description ? <div>{errors.description.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"date\">Campaign start date</label>\n            <input\n                type=\"date\"\n                name=\"start_date\"\n                id=\"start_date\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign start date\"\n                    }\n                })}\n            />\n            {errors.start_date ? <div>{errors.start_date.message} </div> : null}\n        </div>\n        <div>\n            <button type=\"submit\" > Create Game</button>\n        </div>\n    </form>;\n}","import {useRef, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport { isPropertySignature } from \"typescript\";\nimport {login} from \"../../Services/authentication\";\nimport { useHistory } from \"react-router-dom\";\nimport {isLogged,getPublicId,getUsername, logout} from \"../../Services/authentication\";\n\n\n\ninterface FormData {\n    username: string;\n    password: string;\n\n}\nexport default function Login(props: { history: string[]; }){\n    const {register, handleSubmit, errors,} = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            console.log(formData, \"formData\");\n            \n            const response = await fetch(\"/api/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: formData.username,\n                    password: formData.password,\n                })\n            });\n            const data = await response.json();\n            if (data['status'] == \"Success\"){\n                console.log(data)\n                console.log(data['token'])\n                login(data['loggedIn'], data['token'], data['username'], data['public_id'], data['fname'])\n                // props.history.push('/profile/'+data['username']);\n                window.location.href='/profile/'+data['username']\n            }\n            else{\n                setServerErrors([data['error']]);\n            }\n            // if (data[1] != 200){\n            //     console.log(\"Login Unsuccesful\")\n            //     return;\n            // }\n            // else{\n            //     props.history.push('/profile');\n            // }\n            \n\n            setSubmitting(false);\n        })}>\n            {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => ( \n                <li key={error}>{error}</li>\n                ))}\n            </ul>\n           ): null }\n\n        <div>\n            <label htmlFor=\"username\"> Username</label>\n            <input \n                type=\"username\" \n                name=\"username\" \n                id=\"username\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid username.\"\n                }})} \n            />\n             {errors.username ? <div>{errors.username.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"password\"> Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({required: \"required\"})} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Login </button>\n        </div>\n    </form>;\n}","import { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { isPropertySignature } from \"typescript\";\nimport { login } from \"../../Services/authentication\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function CharacterSheet(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm();\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n\n    return <form onSubmit={handleSubmit(async (data) => {\n        setSubmitting(true);\n        setServerErrors([]);\n        const formData = new FormData();\n        formData.append(\"characterSheet\", data.file[0])\n        const response = await fetch(\"/api/create-charactersheet\", {\n            method: \"POST\",\n            body: formData\n    });\n        const res = await response.json();\n        if (res['status'] == \"Success\") {\n            console.log(data[0], \":Server Data\");\n        }\n        else {\n            setServerErrors([res['error']]);\n        }\n\n\n\n        setSubmitting(false);\n    })}>\n        {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => (\n                    <li key={error}>{error}</li>\n                ))}\n            </ul>\n        ) : null}\n        <div>\n        <input ref={register} type=\"file\"\n            name=\"file\" />\n            <button type=\"submit\" > Submit file</button>\n        </div>\n    </form>;\n\n}","import { Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\n\n\n\nexport default function Chat({ setMessage, sendMessage, message, leaveRoom  }: { setMessage: any, sendMessage: any, message: any, leaveRoom: any  }){     \n\n    return (\n        <div>\n            <form className=\"chat-form\">\n                <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Type a message...\"\n                    value={message}\n                    onChange={({ target: { value } }) => setMessage(value)}\n                    onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\n                />\n                <Button variant=\"contained\" onClick={e => sendMessage(e)}>Send</Button>\n                <Button variant=\"contained\" onClick={async() => {await leaveRoom()}}>Leave Chat</Button>\n            </form>\n        </div>\n\n    )\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport openSocket, {io, Socket} from 'socket.io-client';\nimport Chat from './Chat/Chat'\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\nimport \"./GamePage.css\";\nimport {getToken, logout, getUsername} from \"../../Services/authentication\";\nimport { useHistory, useParams } from \"react-router\";\nimport SquareButton from \"./SquareButton/SquareButton\"\nimport { Button, Grid } from \"@material-ui/core\";\n\n\n\n\nconst ENDPOINT = 'https://saving-throw.herokuapp.com/'\nlet socket: Socket<DefaultEventsMap, DefaultEventsMap>;\nlet verifyRoom: boolean;\n\n\ninterface ParamTypes {\n    room: string,\n    code: string,\n    // cname: string\n  }\n\nexport default function GamePage(props: { history: string[];}){\n    let history = useHistory();\n    let {room, code} = useParams<ParamTypes>();\n    // let location = useLocation();\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState<string[]>([]);\n    const [join, setJoin] = useState<boolean>(false);\n    // const [location, setLocation] = useState(window.location);\n    const userName = getUsername();\n    const fieldRef = React.useRef<HTMLInputElement>(null);\n    let msgRef = messages;\n    const token = getToken();\n    // const state: any = history.location.state\n\n    useEffect(() => {\n        verifyRoom = false;\n        checkRoom();\n  \n            // closeRoom();\n\n        return () => {\n            console.log('here')\n            // socket.emit('leave', { name: 'bobBobberson', room: 'xyzk' });\n\n            // socket.off();\n        };\n\n    }, [ENDPOINT]);\n\n    useEffect(() => {\n       if(verifyRoom){\n            socket.on('close',function() {\n                window.location.href='/profile/'+userName\n            });\n\n            socket.on('message', message => {\n                // setMessages(messages => [...messages, message]);\n                receiveMsg(message);\n                if(message === \"Close Room.\"){\n                    leaveRoom();\n                }\n            });\n         \n            if (messages && fieldRef.current) {\n                fieldRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                });\n            }  \n        }\n    },[]);\n\n\n    const sendMessage = (event: any) => {\n        event.preventDefault();\n    \n        if(message) {\n            socket.emit('message',{ name: userName, room: Number(room), message: message}, () => setMessage(''));\n        }\n    } \n    \n\n    function receiveMsg(msg: string){\n        console.log(\"HEREEEE\")\n        msgRef = msgRef.concat(msg)\n        setMessages(msgRef)\n    }\n\n    async function checkRoom(){\n        const response = await fetch('/api/check-room', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`,\n            },\n            body: JSON.stringify({\n                room: Number(room),\n                code: code\n            })\n          });\n        const data = await response.json();\n        if( data['status'] == \"Success\"){\n            verifyRoom = true;\n            socket = io(ENDPOINT);\n            socket.emit('join', { name: userName, room: Number(room)});\n            socket.on('message', message => {\n                receiveMsg(message);\n                if(message === \"Close Room.\"){\n                    leaveRoom();\n                }\n            });\n\n        }\n        if(data['error'] == \"Room does not exist\"){\n            window.location.href='/profile/'+userName\n        }\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n          }\n\n\n\n    }\n\n\n\n    async function leaveRoom(){\n        const response = await fetch('/api/leave-room', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`\n            },\n            body: JSON.stringify({\n                room: Number(room),\n                code: code\n            })\n          });\n        const data = await response.json();\n        console.log(data)\n        if(data['error']){\n            socket.emit('close', {name: userName, room: data.room})\n            window.location.href='/profile/'+userName\n        }else{\n            socket.emit('leave', { name: userName, room: Number(room), message: data['message']});\n            if(data['status'] === \"Host is leaving\" || data['status'] === \"Room is empty\"){\n                socket.emit('close', {name: userName, room: data.room})\n                const deleteResponse = await fetch('/api/delete-room', {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-Access-Token\" : `${token}`\n            \n                    },\n                    body: JSON.stringify({\n                        room: Number(room),\n                    })\n                });\n                const deleteData = await deleteResponse.json();\n                console.log(deleteData)\n            }\n        }\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n        }\n        window.location.href='/profile/'+userName\n\n        //     socket.emit('leave', { name: data.name, room: data.room  });\n\n    //     socket.off();\n    }\n    function getRandomInt(max: number) {\n        // if max is 3, function will return 0, 1 or 2\n        return Math.floor(Math.random() * max);\n    }\n\n    function rollDice(dice: number){\n        let diceVal = getRandomInt(dice)+1\n        socket.emit('message',{ name: userName, room: Number(room), message: \"Rolled d\"+ dice+ \": \" + diceVal}, () => setMessage(''));\n    }\n  \n\n    return (\n        <div>\n            <h1 className=\"title\">Campaign</h1>\n            <h3 className=\"room\">Room: {room}</h3>\n\n        <div className=\"container\"> \n                <div className=\"box\"> \n\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"15vh\"\n                            onClick={() => {rollDice(20)}}\n                            radius = \"10%\"\n                            width = \"30vw\"\n                            children = \"d20\"\n                        />  \n                    </div>\n\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(4)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d4\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(6)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d6\"\n                        />\n                            <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(8)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d8\"\n                        />\n                 \n                    </div>\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(10)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d10\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(12)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d12\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(100)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d100\"\n                        />\n                    </div>\n                      \n\n                            \n                </div>\n            </div>\n            <div className=\"Chat\">\n                <div className=\"fields\" ref={fieldRef}>\n                        {messages.map((item)=>(\n                                <div>{item}</div>\n                            ))}\n\n                </div>\n\n                <Chat message={message} setMessage={setMessage} sendMessage={sendMessage} leaveRoom={leaveRoom}/>\n            </div>        \n                \n\n        </div>\n\n    )\n}","import React from \"react\";\n\ninterface Props {\n  border: string;\n  color: string;\n  children?: React.ReactNode;\n  height: string;\n  onClick: () => void;\n  radius: string\n  width: string;\n}\n\nconst Button: React.FC<Props> = ({ \n    border,\n    color,\n    children,\n    height,\n    onClick, \n    radius,\n    width\n  }) => { \n  return (\n    <button \n      onClick={onClick}\n      style={{\n         backgroundColor: color,\n         border,\n         borderRadius: radius,\n         height,\n         width\n      }}\n    >\n    {children}\n    </button>\n  );\n}\n\nexport default Button;","//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./Profile.css\";\nimport React, {useEffect} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {isLogged,getPublicId,getToken, logout} from \"../../Services/authentication\";\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { red } from '@material-ui/core/colors';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Button from '@material-ui/core/Button';\nimport { Box } from \"@material-ui/core\";\n\nimport GamePage from \"../GamePage/GamePage\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(12, 1fr)',\n      gridGap: theme.spacing(3),\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n    divider: {\n      margin: theme.spacing(2, 0),\n    },\n    root: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      padding: theme.spacing(0, 3),\n      \n    },\n    cardroot:{\n      maxWidth: 'auto',\n      margin: 'auto',\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n    box: {\n      height: 50,\n      display: \"flex\",\n      padding: 8,\n      justifyContent: \"flex-end\",\n      alignItems: \"flex-end\"\n    },\n  }),\n);\n\n\n\nexport default function Profile(props: { history: any[]; }){\n    const token = getToken();\n    const classes = useStyles();\n    const [expandedId, setExpandedId] = React.useState(-1);   \n    const [expandedFriendId, setExpandedFriendId] = React.useState(-1);\n    const [userProfile, setUserProfile] = React.useState({\n      data: {\n        username: \"\",\n        uid: 0,\n        public_id: 0,\n        fname: \"\",\n        lname: \"\",\n      },\n      rendered: false\n    });\n    const [allGames, setAllGames] = React.useState([]);\n\n    async function getUser() {\n      const response = await fetch('/api/user', {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-Access-Token\" : `${token}`\n\n        },\n        body: JSON.stringify({\n          publicId: getPublicId(),\n        })\n      });\n      const users = await response.json();\n      console.log(users);\n\n      if(users['status'] == \"Token is invalid!\"){\n        logout();\n      }\n      else{\n        setUserProfile({\n          data: {\n            username: users['username'],\n            uid: users['uid'],\n            public_id: users['publicId'],\n            fname: users['fname'],\n            lname: users['lname'],\n          },\n          rendered: true\n        });\n      }\n\n    }\n\n    async function getAllCampaigns() {\n      const response = await fetch('/api/getgames', {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-Access-Token\" : `${token}`\n\n        },\n        // body: JSON.stringify({\n        //   publicId: getPublicId(),\n        // })\n      });\n      const data = await response.json();\n      console.log(data);\n\n      if(data['status'] == \"Token is invalid!\"){\n        logout();\n        window.location.href='/'\n\n      }\n      if(data['status'] == \"Success\"){\n          setAllGames(data['games']);\n      }\n\n\n    }\n\n    async function createRoom(id_: number, password_: string) {\n      const response = await fetch('/api/create-room', {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-Access-Token\" : `${token}`\n\n        },\n        body: JSON.stringify({\n          rpassword: password_,\n          cmid: id_\n        })\n      });\n      const data = await response.json();\n\n      if(data['status'] == \"Success\"){\n        window.location.href=\"/gamePage/room=\"+data['room']+\"&code=\"+data['password']\n        // props.history.push({\n        //   pathname: \"/gamepage/room=\"+data['room']+\"&code=\"+data['password'],  \n        //   state: {\n        //     room:  data['room'],\n        //     password: data['password'],\n        //   }\n        // })\n      }else{\n        console.log(\"Not logged in\", \"room-create fail\")\n      }\n\n      console.log(data, \"room\");\n\n      if(data['status'] == \"Token is invalid!\"){\n        logout();\n        window.location.href='/'\n      }\n\n\n    }\n\n    // async function deleteRoom() {\n    //   const response = await fetch('/api/delete-room', {\n    //     method: \"DELETE\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"x-Access-Token\" : `${token}`\n\n    //     },\n    //     // body: JSON.stringify({\n    //     //   rpassword: password_,\n    //     //   cmid: id_\n    //     // })\n    //   });\n    //   const data = await response.json();\n    //   console.log(data);\n\n    //   if(data['status'] == \"Token is invalid!\"){\n    //     logout();\n    //   }\n\n\n    // }\n\n\n    useEffect(() => {\n      if(!userProfile.rendered){\n        getUser();\n      }\n    },[]);\n\n    useEffect(() => {\n      getAllCampaigns();\n      console.log(allGames)\n    },[]);\n\n\n    const games = [{ _id: \"1\" }, { _id: \"2\" }, { _id: \"3\" }];\n    const friends = [{ _id: \"1\", name : \"Carlos\" }, { _id: \"2\", name : \"Miguel\" }, { _id: \"3\", name : \"Amanda\" }];\n\n\n    const handleExpandClick = (i: number) => {\n      setExpandedId(expandedId === i ? -1 : i);\n    };\n    const handleExpandClickFriend = (i: number) => {\n      setExpandedFriendId(expandedFriendId === i ? -1 : i);\n    };\n\n\n    if(allGames.length == 0){\n      return (\n        <div className={classes.root}>\n          <Typography variant=\"h4\" gutterBottom>\n            {userProfile.data.fname}\n          </Typography>\n          <Grid container spacing={1} justify=\"center\" alignItems='center'>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n              Games\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                  <Grid item xs>\n                    <Typography component={'span'}>\n                      No Games     \n                    </Typography>\n                    <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} href=\"/create-game\" >\n                          Add\n                        </Button>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                Friends\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                  <Grid item xs>\n                    <Typography component={'span'}>\n                      No Friends     \n                    </Typography>\n                    <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} >\n                          Add\n                        </Button>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n          \n              <Grid item xs={4}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                    User Description\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                      Character List\n                    </Paper>\n                  </Grid>\n                </Grid>\n              </Grid>\n            \n          \n          </Grid>\n          <Divider className={classes.divider} />\n          \n        </div>\n        \n      )\n\n    }\n    else{\n      return (\n        <div className={classes.root}>\n          <Typography variant=\"h4\" gutterBottom>\n            {userProfile.data.fname}\n          </Typography>\n          <Grid container spacing={1} justify=\"center\" alignItems='center'>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n              Games\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                  <Grid item xs>\n                    <Typography component={'span'}>\n  \n                    {allGames.map((game, i) => (\n                      <Card className={classes.cardroot} key={game['cmid']}>\n                        {game['cname']}\n                        <CardContent />\n                        <CardActions disableSpacing>\n                          <IconButton\n                            className={clsx(classes.expand, {\n                              [classes.expandOpen]: expandedId,\n                            })}\n                            onClick={() => handleExpandClick(i)}\n                            aria-expanded={expandedId === i}\n                            aria-label=\"show more\"\n                          >\n                            <ExpandMoreIcon />\n                          </IconButton>\n                        </CardActions>\n                        <Collapse in={expandedId === i} timeout=\"auto\" unmountOnExit>\n                          <CardContent>\n                            <Typography paragraph>Description:</Typography>\n                            <Typography paragraph>\n                              {game['cdescription']}\n                            </Typography>\n                            <Typography>Entry Code</Typography> \n                            <Typography>{game['password']}</Typography>\n                            <Box component=\"span\" m={1} className={classes.box}>\n              \n                              <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { createRoom(game['cmid'], game['password'])}}>                      \n                                Play\n                              </Button>\n                            </Box>\n                          </CardContent>\n                        </Collapse>\n                      </Card>\n                    ))}\n                      <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} href=\"/create-game\" >\n                          Add\n                        </Button>\n                      </Box>\n                      \n                      \n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                Friends\n  \n                  {friends.map((friend, i) => (\n                        <Card className={classes.cardroot} key={friend._id}>\n                          {friend.name}\n                          <CardContent />\n                          <CardActions disableSpacing>\n                            <IconButton\n                              className={clsx(classes.expand, {\n                                [classes.expandOpen]: expandedFriendId,\n                              })}\n                              onClick={() => handleExpandClickFriend(i)}\n                              aria-expanded={expandedFriendId === i}\n                              aria-label=\"show more\"\n                            >\n                              <ExpandMoreIcon />\n                            </IconButton>\n                          </CardActions>\n                          <Collapse in={expandedFriendId === i} timeout=\"auto\" unmountOnExit>\n                            <CardContent>\n                              <div>Description:</div>\n                            </CardContent>\n                          </Collapse>\n                        </Card>\n                      ))}\n                    <Box component=\"span\" m={1} className={classes.box}>\n                      <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { alert('clicked') }}>\n                        Add\n                      </Button>\n                    </Box>\n              </Paper>\n            </Grid>\n          \n              <Grid item xs={4}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                    User Description\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                      Character List\n                    </Paper>\n                  </Grid>\n                </Grid>\n              </Grid>\n            \n          \n          </Grid>\n          <Divider className={classes.divider} />\n          \n        </div>\n        \n      )\n    }\n  }\n   ","import {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./JoinGame.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {getToken, login} from \"../../Services/authentication\";\n\n\n\n\ninterface FormData {\n    room: number;\n    password: string;\n\n}\nexport default function JoinGame(props: { history: string[]; }){\n    const {register, handleSubmit, errors,} = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    const token = getToken();\n\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            // if(submitting){\n            //     return false\n            // }\n            console.log(formData, \"formData\");\n            \n            const response = await fetch(\"api/join-room\", {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-Access-Token\" : `${token}`\n                },\n                body: JSON.stringify({\n                    room: formData.room,\n                    password: formData.password,\n                })\n            });\n            const data = await response.json();\n            console.log(data, \"join\")\n            if (data['status'] == \"Success\"){\n                window.location.href=\"/gamePage/room=\"+data['room']+\"&code=\"+data['password']\n            }\n            else\n                setServerErrors([data['error']]);\n       \n\n            setSubmitting(false);\n        })}>\n            {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => ( \n                <li key={error}>{error}</li>\n                ))}\n            </ul>\n           ): null }\n\n        <div>\n            <label htmlFor=\"name\">Room Number</label>\n            <input \n                type=\"text\" \n                name=\"room\" \n                id=\"room\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 character long\"\n                    },\n                    maxLength: {\n                        value: 4,\n                        message: \"Must be 4 character long\"\n                    },\n                    validate: (value) => {\n                        return [\n                            /[0-9]/\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain only numbers\";\n                    },\n                    \n                })} \n            />\n            {errors.room ? <div>{errors.room.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 characters long.\",\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Join</button>\n        </div>\n    </form>;\n}","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Home from \"../Home/Home\";\nimport Navbar from \"../NavBar/Navbar\"\nimport CreateUser from \"../CreateAccount/CreateAccount\"\nimport CreateGame from '../GameManagement/CreateGame/CreateGame';\nimport Login from \"../Login/Login\"\nimport CharacterSheet from \"../CharacterSheet/CharacterSheet\"\nimport GamePage from \"../GamePage/GamePage\"\nimport Profile from \"../Profile/Profile\"\nimport JoinGame from \"../Join/JoinGame\"\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/create-user\" component={CreateUser} />\n          <Route exact path=\"/create-game\" component={CreateGame} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/profile/:username\" component={Profile} />\n          <Route exact path=\"/charactersheet\" component={CharacterSheet} />\n          <Route exact path=\"/gamePage/room=:room&code=:code\" component={GamePage} />\n          <Route exact path=\"/joinGame\" component={JoinGame} />\n          <Redirect to=\"/\" />\n     \n        </Switch>\n      </Router>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}