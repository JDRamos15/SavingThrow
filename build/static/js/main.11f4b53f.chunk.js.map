{"version":3,"sources":["Components/Home/Home.js","Services/authentication.tsx","Images/SavingThrowLogo.png","Components/NavBar/Navbar.tsx","Components/CreateAccount/CreateAccount.tsx","Components/GameManagement/CreateGame/CreateGame.tsx","Components/Login/Login.tsx","Components/Item/datatable.tsx","Components/Item/Item.tsx","Components/CharacterSheet/CharacterSheet.tsx","Components/GamePage/Chat/Chat.tsx","Components/GamePage/GamePage.tsx","Components/GamePage/SquareButton/SquareButton.tsx","Components/Profile/Profile.tsx","Components/Join/JoinGame.tsx","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Home","Fragment","className","React","Component","getUsername","userStr","localStorage","getItem","JSON","parse","isLogged","login","logged","token","username","public_id","fname","new_token","replace","new_publicId","setItem","stringify","getToken","logout","removeItem","NavBar","useState","setLogged","useEffect","console","log","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","alt","src","savingThrowLogo","width","height","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","CreateAccount","props","useForm","register","handleSubmit","errors","submitting","setSubmitting","serverErrors","setServerErrors","Card","style","paddingTop","Body","onSubmit","formData","a","fetch","method","headers","body","firstName","first_name","lastName","last_name","email","password","response","json","data","logInresponse","logIndata","window","location","map","error","htmlFor","type","name","ref","required","value","message","minLength","validate","every","pattern","test","disabled","CreateGame","isEnabled","setIsEnabled","description","looking_for","start_date","capacity","Switch","onChange","previousState","Login","Datatable","addList","columns","cellPadding","cellSpacing","heading","row","column","Items","addInventoryList","setData","isLoading","setIsLoading","q","setQ","searchColumns","setSearchColumns","then","rows","color","e","target","checked","includes","prev","filter","sc","some","toString","toLowerCase","indexOf","item","CharacterSheet","inventoryList","FormData","append","file","res","push","Chat","setMessage","sendMessage","leaveRoom","useParams","room","code","placeholder","onKeyPress","event","key","socket","verifyRoom","Button","border","children","radius","backgroundColor","borderRadius","ENDPOINT","GamePage","useHistory","messages","setMessages","userName","fieldRef","useRef","msgRef","checkRoom","on","receiveMsg","current","scrollIntoView","behavior","msg","concat","Number","io","emit","deleteResponse","deleteData","rollDice","dice","max","diceVal","Math","floor","random","SquareButton","preventDefault","useStyles","makeStyles","theme","createStyles","container","display","gridTemplateColumns","gridGap","spacing","paper","padding","textAlign","palette","text","secondary","marginBottom","divider","margin","root","flexGrow","overflow","cardroot","maxWidth","media","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","red","box","justifyContent","alignItems","Profile","classes","expandedId","setExpandedId","expandedFriendId","setExpandedFriendId","uid","lname","rendered","userProfile","setUserProfile","allGames","setAllGames","users","id_","password_","rpassword","cmid","getUser","getAllCampaigns","length","Typography","gutterBottom","Grid","justify","xs","Paper","wrap","component","Box","m","Divider","game","i","CardContent","CardActions","disableSpacing","IconButton","clsx","handleExpandClick","aria-expanded","aria-label","in","timeout","unmountOnExit","paragraph","createRoom","_id","friend","handleExpandClickFriend","alert","JoinGame","maxLength","App","exact","path","CreateUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11f4b53f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n\n        <div className=\"Background\">\n          {/* <Navbar /> */}\n          <div className=\"Title\">\n            Saving Throw\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;","export const getUsername = () => {\n    const userStr = localStorage.getItem('username');\n    if (userStr) return JSON.parse(userStr);\n    else return null;\n}\n\nexport const isLogged = () => {\n    const isLogged = localStorage.getItem('isLogged');\n    if(isLogged) return true;\n    else return false;\n}\n\nexport const login = (logged: boolean, token :string, username: string, public_id: string, fname: string) => {\n    const new_token = token.replace('\"', '')\n    const new_publicId = public_id.replace('\"', \"\")\n    localStorage.setItem('token', new_token);\n    localStorage.setItem('username', JSON.stringify(username));\n    localStorage.setItem('isLogged', JSON.stringify(logged));\n    localStorage.setItem('public_id', new_publicId);\n    localStorage.setItem('fname', JSON.stringify(fname));\n\n}\n\nexport const getToken = () => {\n    return localStorage.getItem('token') || null;\n}\n\nexport const getPublicId = () => {\n    return localStorage.getItem('public_id') || \"\";\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('public_id');\n    localStorage.removeItem('isLogged');\n    \n}","export default __webpack_public_path__ + \"static/media/SavingThrowLogo.6159a385.png\";","import { Navbar, Nav } from \"react-bootstrap\";\nimport {isLogged,getPublicId, getUsername, logout} from \"../../Services/authentication\";\nimport React, {useEffect} from 'react';\nimport savingThrowLogo from '../../Images/SavingThrowLogo.png';\nimport \"./Navbar.css\";\n\nexport default function NavBar() {\n\n    const [logged, setLogged] = React.useState(isLogged());\n\n\n    useEffect (() => \n    {refresh()}\n    )\n    \n    function refresh(){\n        console.log(\"here\")\n        if(logged != isLogged()){\n            setLogged(isLogged())\n        }\n    }\n   \n\n    if(logged){\n        return(\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\" className=\"navbar\">\n                <img\n                    alt=\"\"\n                    src={savingThrowLogo}\n                    width=\"30\"\n                    height=\"30\"\n                    className=\"d-inline-block align-top\"\n                />{' '}\n                Saving Throw\n                </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Link href={\"/profile/\"+getUsername()}>Profile</Nav.Link>\n                    <Nav.Link href={\"/joinGame\"}>Join Game</Nav.Link>\n                    <Nav.Link href=\"/\" onClick = {(logout)}>Logout</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n            </Navbar>\n            );\n    }\n    else{\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n                <Navbar.Brand href=\"/\" className=\"d-flex align-content-left\">\n                <img\n                    alt=\"\"\n                    src={savingThrowLogo}\n                    width=\"100\"\n                    height=\"50\"\n                    className=\"d-inline-block align-top\"\n                />\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href=\"/create-user\">Create account</Nav.Link>\n                        <Nav.Link href=\"/login\">Sign in</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n    \n}","import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./CreateAccount.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { login } from \"../../Services/authentication\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\n\n\n\ninterface FormData {\n    first_name: string;\n    last_name: string;\n    username: string;\n    email: string;\n    password: string;\n\n}\nexport default function CreateAccount(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return (\n        <div className=\"d-flex justify-content-center \">\n            <div >\n                <Card bg='info' style={{ width: '20vw', height: '60vh', paddingTop: '3vh' }}>\n                    <div className=\"d-flex justify-content-center\">\n                        <Card>\n                            <Card.Body>\n                                <form onSubmit={handleSubmit(async (formData) => {\n                                    console.log(formData, \"formData\");\n\n                                    const response = await fetch(\"api/create\", {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\",\n                                        },\n                                        body: JSON.stringify({\n                                            firstName: formData.first_name,\n                                            lastName: formData.last_name,\n                                            username: formData.username,\n                                            email: formData.email,\n                                            password: formData.password,\n                                        })\n                                    });\n                                    const data = await response.json();\n                                    if (data == \"Success\") {\n                                        const logInresponse = await fetch(\"api/login\", {\n                                            method: \"POST\",\n                                            headers: {\n                                                \"Content-Type\": \"application/json\",\n                                            },\n                                            body: JSON.stringify({\n                                                username: formData.username,\n                                                password: formData.password,\n                                            })\n                                        });\n                                        const logIndata = await logInresponse.json();\n                                        if (logIndata['status'] == \"Success\") {\n                                            login(logIndata['loggedIn'], logIndata['token'], logIndata['username'], logIndata['public_id'], logIndata['fname'])\n                                            window.location.href = '/profile/' + data['username']\n                                        }\n                                    }\n                                    else\n                                        setServerErrors([data['error']]);\n\n\n\n                                    setSubmitting(false);\n                                })}>\n                                    {serverErrors ? (\n                                        <ul>\n                                            {serverErrors.map((error) => (\n                                                <li key={error}>{error}</li>\n                                            ))}\n                                        </ul>\n                                    ) : null}\n                                    <h1>Create account</h1>\n                                    <div>\n                                        <label htmlFor=\"name\">First Name</label>\n                                        <input\n                                            type=\"text\"\n                                            name=\"first_name\"\n                                            id=\"first_name\"\n                                            ref={register({\n                                                required: {\n                                                    value: true,\n                                                    message: \"Type your first name.\"\n                                                }\n\n                                            })}\n                                        />\n                                        {errors.first_name ? <div>{errors.first_name.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"name\">Last Name</label>\n                                        <input\n                                            type=\"text\"\n                                            name=\"last_name\"\n                                            id=\"last_name\"\n                                            ref={register({\n                                                required: {\n                                                    value: true,\n                                                    message: \"Type your last name.\"\n                                                }\n                                            })}\n                                        />\n                                        {errors.last_name ? <div>{errors.last_name.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"username\">Username</label>\n                                        <input\n                                            type=\"text\"\n                                            name=\"username\"\n                                            id=\"username\"\n                                            ref={register({\n                                                required: {\n                                                    value: true,\n                                                    message: \"Please enter valid username.\"\n                                                }\n                                            })}\n                                        />\n                                        {errors.username ? <div>{errors.username.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"email\">Email</label>\n                                        <input\n                                            type=\"email\"\n                                            name=\"email\"\n                                            id=\"email\"\n                                            ref={register({\n                                                required: {\n                                                    value: true,\n                                                    message: \"Please enter valid email.\"\n                                                }\n                                            })}\n                                        />\n                                        {errors.email ? <div>{errors.email.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"password\">Password</label>\n                                        <input\n                                            type=\"password\"\n                                            name=\"password\"\n                                            id=\"password\"\n                                            ref={register({\n                                                required: \"required\",\n                                                minLength: {\n                                                    value: 8,\n                                                    message: \"Must be 8 characters long.\",\n                                                },\n                                                validate: (value) => {\n                                                    return [\n                                                        /[a-z]/,\n                                                        /[A-Z]/,\n                                                        /[0-9]/,\n                                                        /[^a-zA-Z0-9]/,\n                                                    ].every((pattern) =>\n                                                        pattern.test(value))\n                                                        || \"Must contain lower, upper number, and special character\";\n                                                },\n                                            })}\n                                        />\n                                        {errors.password ? <div>{errors.password.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <button type=\"submit\" disabled={submitting}> Create Account</button>\n                                    </div>\n                                </form>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Card>\n            </div>\n        </div>);\n}","\nimport { Switch } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { getPublicId, getToken, getUsername, logout } from \"../../../Services/authentication\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateGame.css\";\n\n\ninterface FormData {\n    name: string;\n    description: string;\n    start_date: string;\n    password: string;\n    capacity: number;\n}\nexport default function CreateGame(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [isEnabled, setIsEnabled] = useState(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    function togglSwitch() { setIsEnabled(previousState => !previousState); };\n    const token = getToken();\n\n    return <form onSubmit={handleSubmit(async (formData) => {\n        setSubmitting(true);\n        setServerErrors([]);\n\n        console.log(getPublicId())\n        const response = await fetch(\"/api/create-game\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`\n            },\n            body: JSON.stringify({\n                name: formData.name,\n                description: formData.description,\n                // dm_uid: 1,\n                looking_for: isEnabled,\n                start_date: formData.start_date,\n                password: formData.password,\n                capacity: formData.capacity,\n            })                // dm_uid: 1,\n\n        });\n        const data = await response.json();\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n        }\n        if (data['status'] == \"Success\"){\n            window.location.href = '/profile/' + data['username']\n        }\n        else{\n            window.location.href='/'\n        }\n    \n\n\n        setSubmitting(false);\n    })}>\n        <div>\n            <label htmlFor=\"name\">Campaign Name</label>\n            <input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type the name of the campaign\"\n                    }\n\n                })}\n            />\n            {errors.name ? <div>{errors.name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"description\">Description</label>\n            <input\n                type=\"text\"\n                name=\"description\"\n                id=\"description\"\n                ref={register({\n                    required: {\n                        value: false,\n                        message: \"Please enter your campaign description\"\n                    }\n                })}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"looking_for\">Looking for new players?</label>\n            <Switch\n                onChange={togglSwitch}\n                value={isEnabled}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"password\">Access code? (12 characters max)</label>\n            <input\n                type=\"text\"\n                name=\"password\"\n                id=\"password\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign access code\"\n                    }\n                })}\n            />\n        </div>\n        <div>\n            <label htmlFor=\"capacity\">How many players? (8 players max)</label>\n            <input\n                type=\"number\"\n                name=\"capacity\"\n                id=\"capacity\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign capacity\"\n                    }\n                })}\n            />\n            {errors.description ? <div>{errors.description.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"date\">Campaign start date</label>\n            <input\n                type=\"date\"\n                name=\"start_date\"\n                id=\"start_date\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Please enter your campaign start date\"\n                    }\n                })}\n            />\n            {errors.start_date ? <div>{errors.start_date.message} </div> : null}\n        </div>\n        <div>\n            <button type=\"submit\" > Create Game</button>\n        </div>\n    </form>;\n}","import { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { isPropertySignature } from \"typescript\";\nimport { login } from \"../../Services/authentication\";\nimport { useHistory } from \"react-router-dom\";\nimport { isLogged, getPublicId, getUsername, logout } from \"../../Services/authentication\";\nimport { Card } from \"react-bootstrap\";\nimport './Login.css';\n\n\n\ninterface FormData {\n    username: string;\n    password: string;\n\n}\nexport default function Login(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return (\n        <div className=\"d-flex justify-content-center \">\n            <div >\n                <Card bg='info' style={{width: '20vw', height: '38vh', paddingTop: '3vh'}}>\n                    <div className=\"d-flex justify-content-center\">\n                        <Card>\n                            <Card.Body>\n                                <form onSubmit={handleSubmit(async (formData) => {\n                                    setSubmitting(true);\n                                    setServerErrors([]);\n\n                                    const response = await fetch(\"/api/login\", {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\",\n                                        },\n                                        body: JSON.stringify({\n                                            username: formData.username,\n                                            password: formData.password,\n                                        })\n                                    });\n                                    const data = await response.json();\n                                    if (data['status'] == \"Success\") {\n                                        login(data['loggedIn'], data['token'], data['username'], data['public_id'], data['fname'])\n                                        window.location.href = '/profile/' + data['username']\n                                    }\n                                    else {\n                                        setServerErrors([data['error']]);\n                                    }\n\n\n                                    setSubmitting(false);\n                                })}>\n                                    {serverErrors ? (\n                                        <ul>\n                                            {serverErrors.map((error) => (\n                                                <li key={error}>{error}</li>\n                                            ))}\n                                        </ul>\n                                    ) : null}\n\n                                    <div>\n                                        <h1>Login</h1>\n                                        <label htmlFor=\"username\"> Username</label>\n                                        <input\n                                            type=\"username\"\n                                            name=\"username\"\n                                            id=\"username\"\n                                            ref={register({\n                                                required: {\n                                                    value: true,\n                                                    message: \"Please enter valid username.\"\n                                                }\n                                            })}\n                                        />\n                                        {errors.username ? <div>{errors.username.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"password\"> Password</label>\n                                        <input\n                                            type=\"password\"\n                                            name=\"password\"\n                                            id=\"password\"\n                                            ref={register({ required: \"required\" })}\n                                        />\n                                        {errors.password ? <div>{errors.password.message} </div> : null}\n                                    </div>\n                                    <div>\n                                        <button type=\"submit\" disabled={submitting}> Login </button>\n                                    </div>\n                                </form>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Card>\n            </div>\n\n\n        </div>\n\n    );\n}","import React from \"react\"\nimport './datatable.css'\nexport default function Datatable({ data, addList } : any){\n\n\n    const columns = [ \"name\", \"effect\", \"description\", \"damage\"]\n\n    return(\n        <table className=\"table-border\" cellPadding={1} cellSpacing={1}> \n            <thead className=\"table-border\">\n                {/* Display headers */}\n                <tr >{data[0] && columns.map((heading : any) => <th className=\"table-border\">{heading}</th>)}</tr>\n            </thead>\n            <tbody className=\"table-border\">\n                {/* Iterate over data and dislpay each row */}\n                {data.map((row : any) => \n                    <tr onClick= {() => addList(row)} className=\"table-border\">\n                        {columns.map((column : any) => \n                            <td className=\"table-border\">{row[column]}</td>\n                        )}\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    );\n}","import { render } from '@testing-library/react'\nimport React, {useState, useEffect} from 'react'\nimport Datatable from \"./datatable\"\nimport Loader from \"react-loader-spinner\"\n\n\nexport default function Items({addInventoryList}: any){\n    // Store data. Returns a tuble: (Get, Set}\n    \n    const [data, setData] = useState([])\n    const [list, setList] = useState([])\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    // Query filter\n    const [q, setQ] = useState(\"\")\n    const [searchColumns, setSearchColumns] = useState([\"name\", \"effect\"])\n    // Columns hardcoded\n    const [columns, setColumns] = useState([\"name\", \"effect\", \"description\", \"damage\"])\n\n    // // Load data into useState()\n    useEffect(() => {\n        fetch('/api/itemSearch')\n        .then((response) => response.json())\n        .then((json) => setData(json));\n        setIsLoading(false)\n    }, []);\n\n    const addList  = (item: any) => {\n        addInventoryList(item)\n    }\n\n    function search(rows: any[]){\n        return rows.filter(\n            (row) => \n            searchColumns.some((column) => row[column].toString().toLowerCase().indexOf(q.toLowerCase()) > -1)\n        );\n    }\n\n    if(isLoading){\n        console.log(\"inside loading\")\n\n        return(\n            <Loader \n            type=\"Circles\"\n            color=\"#00BFFF\"\n            height={60}\n            width={80}/>\n        )\n        \n    }\n    else{\n        return (\n            <div >\n                {/* Filter */}\n                <div> \n                    {/* e -> event that happens every time a char is input\n                    e.target.value -> text in textbox */}\n                    <input type=\"text\" value={q} onChange={(e) => setQ(e.target.value)}/>\n                    {\n                        // Check columns filter\n                        columns && columns.map((column : any) => <label>\n                            {/* Checkbox */} \n                            <input type=\"checkbox\" checked={searchColumns.includes(column)}\n                            // Changed check\n                            onChange={(e) => {\n                                console.log(columns)\n                                const checked = searchColumns.includes(column)\n                                setSearchColumns(prev => checked\n                                    ? prev.filter(sc => sc !== column)\n                                    : [...prev, column])\n                            }}/>\n                        {column}</label>)}\n                </div>\n    \n                    {/* Data table */}\n                <div>\n                    <Datatable \n                    data = {search(data)}\n                    addList = {addList}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n}","import { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { getToken } from \"../../Services/authentication\";\nimport Items from '../Item/Item';\n\nexport default function CharacterSheet(props: { history: string[]; }) {\n    const { register, handleSubmit, errors, } = useForm();\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    let inventoryList: any = [];\n\n    const addInventoryList = (item: any) => {\n        inventoryList.push(item)\n    }\n\n    return <form onSubmit={handleSubmit(async (data) => {\n        setSubmitting(true);\n        setServerErrors([]);\n        const formData = new FormData();\n        const token = getToken();\n        formData.append(\"characterSheet\", data.file[0])\n        console.log(formData)\n        const response = await fetch(\"/api/create-charactersheet\", {\n            method: \"POST\",\n            headers: {\n                \"x-Access-Token\" : `${token}`\n            },\n            body: formData\n            \n        });\n        const res = await response.json();\n        if(res['status'] == \"Token is invalid!\"){\n            window.location.href='/'\n        }\n        if (res['status'] == \"Success\") {\n            console.log(\"Success!\")\n            // let body = {\n            //     csid: res['csid'],\n            //     inventoryList: inventoryList\n            // }\n            // let req = {\n            //     method: \"POST\",\n            //     headers: {'Content-Type':'application/json'},\n            //     body: JSON.stringify(body)\n            // }\n            // console.log(req)\n            // const response = await fetch(\"/api/create-character\", req);\n        }\n        else {\n            setServerErrors([res['error']]);\n        }\n\n\n\n        setSubmitting(false);\n    })}>\n        {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => (\n                    <li key={error}>{error}</li>\n                ))}\n            </ul>\n        ) : null}\n        <div>\n            <input ref={register} type=\"file\"\n                name=\"file\" />\n            <button type=\"submit\" > Submit file</button>\n            <Items addInventoryList={addInventoryList}></Items>\n        </div>\n    </form>;\n\n}","import { Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport \"./Chat.css\";\n\ninterface ParamTypes {\n    room: string,\n    code: string,\n    // cname: string\n  }\n\n\nexport default function Chat({ setMessage, sendMessage, message, leaveRoom  }: { setMessage: any, sendMessage: any, message: any, leaveRoom: any  }){     \n    let {room, code} = useParams<ParamTypes>();\n    console.log(\"Room: \" + room)\n    return (\n        <div>\n            <form className=\"chat-form\">\n                <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Type a message...\"\n                    value={message}\n                    onChange={({ target: { value } }) => setMessage(value)}\n                    onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\n                />\n                <Button variant=\"contained\" onClick={e => sendMessage(e)}>Send</Button>\n                <Button variant=\"contained\" onClick={async() => {await leaveRoom()}}>Leave Chat</Button>\n            </form>\n        </div>\n\n    )\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport openSocket, {io, Socket} from 'socket.io-client';\nimport Chat from './Chat/Chat'\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\nimport \"./GamePage.css\";\nimport {getToken, logout, getUsername} from \"../../Services/authentication\";\nimport { useHistory, useParams } from \"react-router\";\nimport SquareButton from \"./SquareButton/SquareButton\"\nimport { Button, Grid } from \"@material-ui/core\";\n\n\n\n\nconst ENDPOINT = 'https://saving-throw.herokuapp.com/'\nlet socket: Socket<DefaultEventsMap, DefaultEventsMap>;\nlet verifyRoom: boolean;\n\n\ninterface ParamTypes {\n    room: string,\n    code: string\n  }\n\nexport default function GamePage(props: { history: string[];}){\n    let history = useHistory();\n    let {room, code} = useParams<ParamTypes>();\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState<string[]>([]);\n    const [join, setJoin] = useState<boolean>(false);\n    const userName = getUsername();\n    const fieldRef = React.useRef<HTMLInputElement>(null);\n    let msgRef = messages;\n    const token = getToken();\n\n    useEffect(() => {\n        verifyRoom = false;\n        checkRoom();\n  \n\n        return () => {\n            console.log('here')\n        };\n\n    }, [ENDPOINT]);\n\n    useEffect(() => {\n       if(verifyRoom){\n            socket.on('close',function() {\n                window.location.href='/profile/'+userName\n            });\n\n            socket.on('message', message => {\n                receiveMsg(message);\n                if(message === \"Close Room.\"){\n                    leaveRoom();\n                }\n            });\n         \n            if (messages && fieldRef.current) {\n                fieldRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                });\n            }  \n        }\n    },[]);\n\n\n    const sendMessage = (event: any) => {\n        event.preventDefault();\n    \n        if(message) {\n            socket.emit('message',{ name: userName, room: Number(room), message: message}, () => setMessage(''));\n        }\n    } \n    \n\n    function receiveMsg(msg: string){\n        console.log(\"HEREEEE\")\n        msgRef = msgRef.concat(msg)\n        setMessages(msgRef)\n    }\n\n    async function checkRoom(){\n        const response = await fetch('/api/check-room', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`,\n            },\n            body: JSON.stringify({\n                room: Number(room),\n                code: code\n            })\n          });\n        const data = await response.json();\n        if( data['status'] == \"Success\"){\n            verifyRoom = true;\n            socket = io(ENDPOINT);\n            socket.emit('join', { name: userName, room: Number(room)});\n            socket.on('message', message => {\n                receiveMsg(message);\n                if(message === \"Close Room.\"){\n                    leaveRoom();\n                }\n            });\n\n        }\n        if(data['error'] == \"Room does not exist\"){\n            window.location.href='/profile/'+userName\n        }\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n          }\n\n\n\n    }\n\n\n\n    async function leaveRoom(){\n        const response = await fetch('/api/leave-room', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-Access-Token\" : `${token}`\n            },\n            body: JSON.stringify({\n                room: Number(room),\n                code: code\n            })\n          });\n        const data = await response.json();\n        console.log(data)\n        if(data['error']){\n            socket.emit('close', {name: userName, room: data.room})\n            window.location.href='/profile/'+userName\n        }else{\n            socket.emit('leave', { name: userName, room: Number(room), message: data['message']});\n            if(data['status'] === \"Host is leaving\" || data['status'] === \"Room is empty\"){\n                socket.emit('close', {name: userName, room: data.room})\n                const deleteResponse = await fetch('/api/delete-room', {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-Access-Token\" : `${token}`\n            \n                    },\n                    body: JSON.stringify({\n                        room: Number(room),\n                    })\n                });\n                const deleteData = await deleteResponse.json();\n                console.log(deleteData)\n            }\n        }\n        if(data['status'] == \"Token is invalid!\"){\n            logout();\n            window.location.href='/'\n        }\n        window.location.href='/profile/'+userName\n\n        //     socket.emit('leave', { name: data.name, room: data.room  });\n\n    }\n    function getRandomInt(max: number) {\n        // if max is 3, function will return 0, 1 or 2\n        return Math.floor(Math.random() * max);\n    }\n\n    function rollDice(dice: number){\n        let diceVal = getRandomInt(dice)+1\n        socket.emit('message',{ name: userName, room: Number(room), message: \"Rolled d\"+ dice+ \": \" + diceVal}, () => setMessage(''));\n    }\n  \n\n    return (\n        <div>\n            <h1 className=\"title\">Campaign</h1>\n            <h3 className=\"room\">Room: {room}</h3>\n\n        <div className=\"container\"> \n                <div className=\"box\"> \n\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"15vh\"\n                            onClick={() => {rollDice(20)}}\n                            radius = \"10%\"\n                            width = \"30vw\"\n                            children = \"d20\"\n                        />  \n                    </div>\n\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(4)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d4\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(6)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d6\"\n                        />\n                            <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(8)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d8\"\n                        />\n                 \n                    </div>\n                    <div className=\"box-row\"> \n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(10)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d10\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(12)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d12\"\n                        />\n                        <SquareButton\n                            border=\"default\"\n                            color=\"#fdffc4\"\n                            height = \"10vh\"\n                            onClick={() => {rollDice(100)}}\n                            radius = \"10%\"\n                            width = \"10vw\"\n                            children = \"d100\"\n                        />\n                    </div>\n                      \n\n                            \n                </div>\n            </div>\n            <div className=\"Chat\">\n                <div className=\"fields\" ref={fieldRef}>\n                        {messages.map((item)=>(\n                                <div>{item}</div>\n                            ))}\n\n                </div>\n\n                <Chat message={message} setMessage={setMessage} sendMessage={sendMessage} leaveRoom={leaveRoom}/>\n            </div>        \n                \n\n        </div>\n\n    )\n}","import React from \"react\";\n\ninterface Props {\n  border: string;\n  color: string;\n  children?: React.ReactNode;\n  height: string;\n  onClick: () => void;\n  radius: string\n  width: string;\n}\n\nconst Button: React.FC<Props> = ({ \n    border,\n    color,\n    children,\n    height,\n    onClick, \n    radius,\n    width\n  }) => { \n  return (\n    <button \n      onClick={onClick}\n      style={{\n         backgroundColor: color,\n         border,\n         borderRadius: radius,\n         height,\n         width\n      }}\n    >\n    {children}\n    </button>\n  );\n}\n\nexport default Button;","//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./Profile.css\";\nimport React, {useEffect} from 'react';\nimport {Link, useParams} from \"react-router-dom\";\nimport {isLogged,getPublicId,getToken, logout} from \"../../Services/authentication\";\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport { red } from '@material-ui/core/colors';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { Box } from \"@material-ui/core\";\n\nimport GamePage from \"../GamePage/GamePage\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(12, 1fr)',\n      gridGap: theme.spacing(3),\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n    divider: {\n      margin: theme.spacing(2, 0),\n    },\n    root: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      padding: theme.spacing(0, 3),\n      \n    },\n    cardroot:{\n      maxWidth: 'auto',\n      margin: 'auto',\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n    box: {\n      height: 50,\n      display: \"flex\",\n      padding: 8,\n      justifyContent: \"flex-end\",\n      alignItems: \"flex-end\"\n    },\n  }),\n);\n\ninterface ParamTypes {\n  username: string\n}\n\n\n\nexport default function Profile(props: { history: any[]; }){\n    const token = getToken();\n    const classes = useStyles();\n    const [expandedId, setExpandedId] = React.useState(-1);   \n    const [expandedFriendId, setExpandedFriendId] = React.useState(-1);\n    const [userProfile, setUserProfile] = React.useState({\n      data: {\n        username: \"\",\n        uid: 0,\n        public_id: 0,\n        fname: \"\",\n        lname: \"\",\n      },\n      rendered: false\n    });\n    const [allGames, setAllGames] = React.useState([]);\n    let {username} = useParams<ParamTypes>();\n\n\n    async function getUser() {\n      const response = await fetch('/api/user', {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-Access-Token\" : `${token}`\n\n        }\n      });\n      const users = await response.json();\n      console.log(users);\n\n      if(users['status'] == \"Token is invalid!\"){\n        logout();\n        window.location.href='/'\n      }\n      else{\n        if(users['username'] != username){\n          window.location.href=\"/profile/\"+users['username']\n        }\n        setUserProfile({\n          data: {\n            username: users['username'],\n            uid: users['uid'],\n            public_id: users['publicId'],\n            fname: users['fname'],\n            lname: users['lname'],\n          },\n          rendered: true\n        });\n      }\n\n\n    }\n\n    async function getAllCampaigns() {\n      const response = await fetch('/api/getgames', {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-Access-Token\" : `${token}`\n\n        },\n      });\n      const data = await response.json();\n      console.log(data);\n\n      if(data['status'] == \"Token is invalid!\"){\n        logout();\n        window.location.href='/'\n\n      }\n      if(data['status'] == \"Success\"){\n          setAllGames(data['games']);\n      }\n\n\n    }\n\n    async function createRoom(id_: number, password_: string) {\n      const response = await fetch('/api/create-room', {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-Access-Token\" : `${token}`\n\n        },\n        body: JSON.stringify({\n          rpassword: password_,\n          cmid: id_\n        })\n      });\n      const data = await response.json();\n\n      if(data['status'] == \"Success\"){\n        window.location.href=\"/gamePage/room=\"+data['room']+\"&code=\"+data['password']\n      }else{\n        console.log(\"Not logged in\", \"room-create fail\")\n      }\n\n      console.log(data, \"room\");\n\n      if(data['status'] == \"Token is invalid!\"){\n        logout();\n        window.location.href='/'\n      }\n\n\n    }\n\n\n\n    useEffect(() => {\n      if(!userProfile.rendered){\n        getUser();\n      }\n    },[]);\n\n    useEffect(() => {\n      getAllCampaigns();\n      console.log(allGames)\n    },[]);\n\n\n    const games = [{ _id: \"1\" }, { _id: \"2\" }, { _id: \"3\" }];\n    const friends = [{ _id: \"1\", name : \"Carlos\" }, { _id: \"2\", name : \"Miguel\" }, { _id: \"3\", name : \"Amanda\" }];\n\n\n    const handleExpandClick = (i: number) => {\n      setExpandedId(expandedId === i ? -1 : i);\n    };\n    const handleExpandClickFriend = (i: number) => {\n      setExpandedFriendId(expandedFriendId === i ? -1 : i);\n    };\n\n\n    if(allGames.length == 0){\n      return (\n        <div className={classes.root}>\n          <Typography variant=\"h4\" gutterBottom>\n            {userProfile.data.fname}\n          </Typography>\n          <Grid container spacing={1} justify=\"center\" alignItems='center'>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n              Games\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                  <Grid item xs>\n                    <Typography component={'span'}>\n                      No Games     \n                    </Typography>\n                    <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} href=\"/create-game\" >\n                          Add\n                        </Button>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                Friends\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                  <Grid item xs>\n                    <Typography component={'span'}>\n                      No Friends     \n                    </Typography>\n                    <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} >\n                          Add\n                        </Button>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n          \n              <Grid item xs={4}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                    User Description\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                      Character List\n                    </Paper>\n                  </Grid>\n                </Grid>\n              </Grid>\n            \n          \n          </Grid>\n          <Divider className={classes.divider} />\n          \n        </div>\n        \n      )\n\n    }\n    else{\n      return (\n        <div className={classes.root}>\n          <Typography variant=\"h4\" gutterBottom>\n            {userProfile.data.fname}\n          </Typography>\n          <Grid container spacing={1} justify=\"center\" alignItems='center'>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n              Games\n                <Grid container wrap=\"nowrap\" spacing={2}>\n                  <Grid item xs>\n                    <Typography component={'span'}>\n  \n                    {allGames.map((game, i) => (\n                      <Card className={classes.cardroot} key={game['cmid']}>\n                        {game['cname']}\n                        <CardContent />\n                        <CardActions disableSpacing>\n                          <IconButton\n                            className={clsx(classes.expand, {\n                              [classes.expandOpen]: expandedId,\n                            })}\n                            onClick={() => handleExpandClick(i)}\n                            aria-expanded={expandedId === i}\n                            aria-label=\"show more\"\n                          >\n                            <ExpandMoreIcon />\n                          </IconButton>\n                        </CardActions>\n                        <Collapse in={expandedId === i} timeout=\"auto\" unmountOnExit>\n                          <CardContent>\n                            <Typography paragraph>Description:</Typography>\n                            <Typography paragraph>\n                              {game['cdescription']}\n                            </Typography>\n                            <Typography>Entry Code</Typography> \n                            <Typography>{game['password']}</Typography>\n                            <Box component=\"span\" m={1} className={classes.box}>\n              \n                              <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { createRoom(game['cmid'], game['password'])}}>                      \n                                Play\n                              </Button>\n                            </Box>\n                          </CardContent>\n                        </Collapse>\n                      </Card>\n                    ))}\n                      <Box component=\"span\" m={1} className={classes.box}>\n                        <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} href=\"/create-game\" >\n                          Add\n                        </Button>\n                      </Box>\n                      \n                      \n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                Friends\n  \n                  {friends.map((friend, i) => (\n                        <Card className={classes.cardroot} key={friend._id}>\n                          {friend.name}\n                          <CardContent />\n                          <CardActions disableSpacing>\n                            <IconButton\n                              className={clsx(classes.expand, {\n                                [classes.expandOpen]: expandedFriendId,\n                              })}\n                              onClick={() => handleExpandClickFriend(i)}\n                              aria-expanded={expandedFriendId === i}\n                              aria-label=\"show more\"\n                            >\n                              <ExpandMoreIcon />\n                            </IconButton>\n                          </CardActions>\n                          <Collapse in={expandedFriendId === i} timeout=\"auto\" unmountOnExit>\n                            <CardContent>\n                              <div>Description:</div>\n                            </CardContent>\n                          </Collapse>\n                        </Card>\n                      ))}\n                    <Box component=\"span\" m={1} className={classes.box}>\n                      <Button variant=\"contained\" color=\"secondary\" style={{ borderRadius: 20 }} onClick={() => { alert('clicked') }}>\n                        Add\n                      </Button>\n                    </Box>\n              </Paper>\n            </Grid>\n          \n              <Grid item xs={4}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                    User Description\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                      Character List\n                    </Paper>\n                  </Grid>\n                </Grid>\n              </Grid>\n            \n          \n          </Grid>\n          <Divider className={classes.divider} />\n          \n        </div>\n        \n      )\n    }\n  }\n   ","import {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./JoinGame.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {getToken, login} from \"../../Services/authentication\";\n\n\n\n\ninterface FormData {\n    room: number;\n    password: string;\n\n}\nexport default function JoinGame(props: { history: string[]; }){\n    const {register, handleSubmit, errors,} = useForm<FormData>({});\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    const token = getToken();\n\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            \n            const response = await fetch(\"api/get-character\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-Access-Token\" : `${token}`\n                },\n                body: JSON.stringify({\n                    room: formData.room,\n                    password: formData.password\n                })\n            });\n            const data = await response.json();\n            if(data['status'] == \"Token is invalid!\"){\n                window.location.href='/'\n            }\n            if(data['status'] == 'Does not exist'){\n                window.location.href=\"/charactersheet/\"+data['cmid']\n            }\n            if(data['status'] == 'Character exists'){\n                const response = await fetch(\"api/join-room\", {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-Access-Token\" : `${token}`\n                    },\n                    body: JSON.stringify({\n                        room: formData.room,\n                        password: formData.password,\n                    })\n                });\n                const data = await response.json();\n                if (data['status'] == \"Success\"){\n                    window.location.href=\"/gamePage/room=\"+data['room']+\"&code=\"+data['password']\n                }\n                else\n                    setServerErrors([data['error']]);\n            }\n            else\n                    setServerErrors([data['error']]);\n\n            setSubmitting(false);\n        })}>\n            {serverErrors ? (\n            <ul>\n                {serverErrors.map((error) => ( \n                <li key={error}>{error}</li>\n                ))}\n            </ul>\n           ): null }\n\n        <div>\n            <label htmlFor=\"name\">Room Number</label>\n            <input \n                type=\"text\" \n                name=\"room\" \n                id=\"room\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 character long\"\n                    },\n                    maxLength: {\n                        value: 4,\n                        message: \"Must be 4 character long\"\n                    },\n                    validate: (value) => {\n                        return [\n                            /[0-9]/\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain only numbers\";\n                    },\n                    \n                })} \n            />\n            {errors.room ? <div>{errors.room.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 4,\n                        message: \"Must be 4 characters long.\",\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Join</button>\n        </div>\n    </form>;\n}","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Home from \"../Home/Home\";\nimport Navbar from \"../NavBar/Navbar\"\nimport CreateUser from \"../CreateAccount/CreateAccount\"\nimport CreateGame from '../GameManagement/CreateGame/CreateGame';\nimport Login from \"../Login/Login\"\nimport CharacterSheet from \"../CharacterSheet/CharacterSheet\"\nimport GamePage from \"../GamePage/GamePage\"\nimport Profile from \"../Profile/Profile\"\nimport JoinGame from \"../Join/JoinGame\"\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/create-user\" component={CreateUser} />\n          <Route exact path=\"/create-game\" component={CreateGame} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/profile/:username\" component={Profile} />\n          <Route exact path=\"/charactersheet/:cmid\" component={CharacterSheet} />\n          <Route exact path=\"/gamePage/room=:room&code=:code\" component={GamePage} />\n          <Route exact path=\"/joinGame\" component={JoinGame} />\n          <Redirect to=\"/\" />\n     \n        </Switch>\n      </Router>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}