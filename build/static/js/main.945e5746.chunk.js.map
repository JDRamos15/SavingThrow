{"version":3,"sources":["Components/Home/Home.js","Components/CreateAccount/CreateAccount.tsx","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Home","className","React","Component","CreateAccount","useForm","defaultValues","first_name","last_name","username","email","password","register","handleSubmit","errors","useState","submitting","setSubmitting","setServerErrors","onSubmit","formData","a","console","log","fetch","method","headers","body","JSON","stringify","firstName","lastName","response","json","data","htmlFor","type","name","id","ref","required","value","message","minLength","validate","every","pattern","test","disabled","App","exact","path","component","CreateUser","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.945e5746.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div className =\"Background\">\n        <div className =\"Title\">\n          Saving Throw\n        </div>\n\n      </div>\n       \n    );\n  }\n}\n\nexport default Home;","import {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n//import ReCAPTCHA from \"react-google-recaptcha\";\nimport \"./CreateAccount.css\";\n\n\ninterface FormData {\n    first_name: string;\n    last_name: string;\n    username: string;\n    email: string;\n    password: string;\n\n}\nexport default function CreateAccount(){\n    const {register, handleSubmit, errors,} = useForm<FormData>({\n        defaultValues:{\n            first_name: \"Bob\",\n            last_name: \"Bobson\",\n            username: \"bobyWillRockU\",\n            email: \"robert@email.com\",\n            password: \"R0b#rt123\",\n        }\n    });\n    const [submitting, setSubmitting] = useState<boolean>(false);\n    const [serverErrors, setServerErrors] = useState<Array<string>>([]);\n    return <form onSubmit={handleSubmit(async(formData)=>{\n            setSubmitting(true);\n            setServerErrors([]);\n            // if(submitting){\n            //     return false\n            // }\n            console.log(formData, \"formData\");\n            \n            const response = await fetch(\"api/create\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    //formData\n                    // if want to uses token(watch video)\n                    firstName: formData.first_name,\n                    lastName: formData.last_name,\n                    username: formData.username,\n                    email: formData.email,\n                    password: formData.password,\n                })\n            });\n            const data = await response.json();\n            console.log(data);\n            if (data == \"Success\")\n                console.log(data, \":Server Data\");\n            else\n                console.log(\"Wrong\");\n            // if (data.errors){\n            //     setServerErrors(data.errors);\n\n            // }else{\n            //     console.log('success');\n            // }\n\n            \n\n            setSubmitting(false);\n        })}>\n        <div>\n            <label htmlFor=\"name\">First Name</label>\n            <input \n                type=\"text\" \n                name=\"first_name\" \n                id=\"first_name\" \n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Type your first name.\"\n                    }\n                    \n                })} \n            />\n            {errors.first_name ? <div>{errors.first_name.message} </div> : null}\n        </div>\n        <div>\n            <label htmlFor=\"name\">Last Name</label>\n            <input \n                type=\"text\" \n                name=\"last_name\" \n                id=\"last_name\" \n                ref={register({  required: {\n                    value: true,\n                    message: \"Type your last name.\"\n                }})} \n            />\n             {errors.last_name ? <div>{errors.last_name.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"username\">Username</label>\n            <input \n                type=\"text\" \n                name=\"username\" \n                id=\"username\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid username.\"\n                }})} \n            />\n             {errors.username ? <div>{errors.username.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"email\">Email</label>\n            <input \n                type=\"email\" \n                name=\"email\" \n                id=\"email\" \n                ref={register({required: {\n                    value: true,\n                    message: \"Please enter valid email.\"\n                }})} \n            />\n             {errors.email ? <div>{errors.email.message} </div>: null}\n        </div>\n        <div>\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                ref={register({\n                    required: \"required\",\n                    minLength: {\n                        value: 8,\n                        message: \"Must be 8 characters long.\",\n                    },\n                    validate: (value) => {\n                        return [\n                            /[a-z]/,\n                            /[A-Z]/,\n                            /[0-9]/,\n                            /[^a-zA-Z0-9]/,\n                        ].every((pattern) => \n                        pattern.test(value)) \n                        || \"Must contain lower, upper number, and special character\";\n                    },\n                })} \n            />\n             {errors.password ? <div>{errors.password.message} </div>: null}\n        </div>\n        <div>\n            <button type=\"submit\" disabled = {submitting}> Create Account</button>\n        </div>\n    </form>;\n}","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport Home from \"../Home/Home\";\nimport CreateUser from \"../CreateAccount/CreateAccount\"\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/create-user\" component={CreateUser} />\n        {/*<Route exact path=\"/login\" component={LogIn} />\n        <Route exact path=\"/profile:email\" component={Profike} />*/}\n        {/* <Route exact path=\"/home\" component={Home} /> */}\n        {/* In case no route does not exist, can create a 404 page341 */}\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}